import java.util.*;
import java_cup.runtime.*;
import java.io.*;
import codigo.No;

parser code {:
    // Connect this parser to a scanner!
	private int auxCounter = 0;
	private No raiz = new No(null);
	private No aux = null;
	private static String out = "";
    public static void main (String args[]) throws Exception{
    		System.out.println("Insira o nome do arquivo de entrada: ");
		java.util.Scanner entrada = new java.util.Scanner(System.in);
		String nome = entrada.nextLine();
		Parser fdp = new Parser(new Yylex(new java.io.FileReader(nome)));
		No nRaiz = (No) fdp.parse().value;
		System.out.println(out);
		FileWriter arvParser, codInter;
		arvParser = null;
		codInter = null;
		try {
			arvParser = new FileWriter(new File("ArvoreParser.txt"));
			arvParser.write(nRaiz.toString());
			codInter = new FileWriter(new File("CodigoInter.txt"));
			codInter.write(nRaiz.getExpressao());
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (arvParser != null)
				arvParser.close();
			if (codInter != null)
				codInter.close();
		}
	}
:}


/* Terminals (tokens returned by the scanner). */
terminal            AND, BREAK, DO, ELSE, ELSEIF, END, FALSE, FOR, FUNCTION, IF, IN,
					LOCAL, NIL, NOT, OR, REPEAT, RETURN, THEN, TRUE, UNTIL, WHILE, VEZES,
					MAIS, MENOS, DIVIDE, PVIRG, VIRG, PARENE, PAREND, CHAVEE, CHAVED, IGUAL,
					IGUALI, MENOR, MAIOR, MENORI, MAIORI, PONTO, PONTOS, TILI, DPONTOS, TPONTOS,
					EXPO, RESTO, TRALHA, COLCHEE, COLCHED;
terminal Integer 	INT;
terminal Float		REAL;
terminal String 	 IDENT, STRING;

/* Non terminals */
non terminal	No	block, chunk, chunk2, stat, laststat, varlist, explist, functioncall, exp,
					namelist, funcname, funcname2, funcbody, var, function, tableconstructor,
					args, parlist, fieldlist, fieldlist2, field, fieldsep, ifeio, factor;

/* Precedences */

precedence left OR, AND;
precedence left TILI, IGUALI;
precedence left MENOR, MAIOR, MENORI, MAIORI;
precedence left MAIS, MENOS;
precedence left VEZES, DIVIDE, RESTO;  
precedence left STRING, INT, REAL;
precedence left END, IDENT, NOT, TRALHA, MENOS,PARENE, PAREND;
precedence right EXPO, DPONTOS;


/* The grammar rules */
chunk ::=	chunk2:ch2 {: aux = new No(null, "chunk");
									No.novoFilho(aux, ch2);
									aux.setValor(ch2.getValor());
									aux.setExpressao(ch2.getExpressao());
									RESULT =  aux;  :} 
		|chunk2:ch2 laststat:lststt       {: aux = new No(null, "chunk");
									No.novoFilho(aux, ch2);
									No.novoFilho(aux, lststt);
									aux.setExpressao(ch2.getExpressao()+lststt.getExpressao()+ lststt.getValor());
									RESULT =  aux;
									 :}
		| chunk2:ch2 laststat:lst PVIRG   {: aux = new No(null, "chunk");
									No.novoFilho(aux, ch2);
									No.novoFilho(aux, lst);
									No.novoFilho(aux, ";");
									aux.setExpressao(ch2.getExpressao()+lst.getExpressao()+ lst.getValor());
									RESULT =  aux;
									 :}
		| laststat:lststt       {: aux = new No(null, "chunk");
									No.novoFilho(aux, lststt);
									aux.setExpressao(lststt.getExpressao()+lststt.getValor());
									RESULT =  aux;
									 :}
		| laststat:lst PVIRG   {: aux = new No(null, "chunk");
									No.novoFilho(aux, lst);
									No.novoFilho(aux, ";");
									aux.setExpressao(lst.getExpressao()+lst.getValor());
									RESULT =  aux;
									 :}
		| {: aux = new No(null, "chunk");
					RESULT =  aux;
					 :}
		;
chunk2 ::= chunk2:ch2 stat:stt  {:aux = new No(null, "chunk2");
					No.novoFilho(aux, ch2);
					No.novoFilho(aux, stt);
					aux.setExpressao(ch2.getExpressao() + stt.getExpressao()+ stt.getValor());
					RESULT =  aux;
					:}
		| chunk2:ch2 stat:stt PVIRG {: aux = new No(null, "chunk2");
					No.novoFilho(aux, ch2);
					No.novoFilho(aux, stt);
					No.novoFilho(aux, ";");
					aux.setExpressao(ch2.getExpressao() + stt.getExpressao()+ stt.getValor());
					RESULT =  aux;
					 :}
		| stat:stt  {:aux = new No(null, "chunk2");
					No.novoFilho(aux, stt);
					aux.setExpressao(stt.getExpressao()+stt.getValor());
					RESULT =  aux;
					:}
		| stat:stt PVIRG {: aux = new No(null, "chunk2");
					No.novoFilho(aux, stt);
					No.novoFilho(aux, ";");
					aux.setExpressao(stt.getExpressao()+stt.getValor());
					RESULT =  aux;
					 :}
		;
block ::= chunk:ch						{: aux = new No(null, "block");
					No.novoFilho(aux, ch);
					aux.setExpressao(ch.getExpressao());
					RESULT =  aux;
					 :};
stat ::= varlist:v IGUAL explist:el		{:  aux = new No(null, "stat");
														No.novoFilho(aux, v);
														No.novoFilho(aux, "=");
														No.novoFilho(aux, el);
														aux.setExpressao(v.getExpressao()+el.getExpressao()+v.getValor()+" = "+ el.getValor()+"\n");
														RESULT =  aux;
														:}
		| functioncall:fc				{:  aux = new No(null, "stat");
														No.novoFilho(aux, fc);
														aux.setExpressao(fc.getExpressao()+fc.getValor()+"\n");
														RESULT =  aux;
														:}
		| DO block:bl END				{:  aux = new No(null, "stat");
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao("do\n"+bl.getExpressao()+"end\n");
														RESULT =  aux; :}
		| WHILE exp:e DO block:b END	{: aux = new No(null, "stat");
														No.novoFilho(aux, "while");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, b);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+"::label"+auxCounter+"::\n"+
																			"if not("+e.getValor()+") then\ngoto fim\nend"+
																			auxCounter+"\n"+b.getExpressao()+"goto label"+
																			auxCounter+"\n::fim"+auxCounter+"::\n");
														RESULT =  aux;
														:}
		| REPEAT block:b UNTIL exp:e	{: aux = new No(null, "stat");
														No.novoFilho(aux, "repeat");
														No.novoFilho(aux, b);
														No.novoFilho(aux, "until");
														No.novoFilho(aux, e);
														aux.setExpressao("::label"+auxCounter+"::\n"+b.getExpressao()+e.getExpressao()+
																			"if not("+e.getValor()+") then \ngoto label"+
																			auxCounter+"\nend\n");
														RESULT =  aux;
														:}
		| FOR IDENT:i IGUAL exp:e1 VIRG exp:e2 DO block:bl END		{: aux = new No(null, "stat");
														No.novoFilho(aux, "for");
														No.novoFilho(aux, "id");
														No.novoFilho(aux, "=");
														No.novoFilho(aux, e1);
														No.novoFilho(aux, ",");
														No.novoFilho(aux, e2);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao("aux"+auxCounter+"="+e1.getValor()+"\n"+"aux"+auxCounter+1+"="+e2.getValor()+"\n"+
																"aux"+auxCounter+2+"= 1 \n"+"aux"+auxCounter+3+"= "+auxCounter+
																" and "+auxCounter+2+"\n aux"+auxCounter+4+"= aux"+auxCounter+2+" and aux"+auxCounter+
																3+"\n if not("+auxCounter+4+") then goto fim"+auxCounter+"\n aux"+auxCounter+" = "+
																auxCounter+" - aux"+auxCounter+2+"\n ::label"+auxCounter+"::\n aux"+auxCounter+
																"= aux"+auxCounter+" + aux"+auxCounter+2+"\n aux"+auxCounter+5+" = aux"+auxCounter+2+
																" >= 0 \n aux"+auxCounter+6+"= aux"+auxCounter+" > aux"+auxCounter+1+"\n aux"+
																auxCounter+7+"= aux"+auxCounter+5+" and aux"+auxCounter+6+"\n aux"+auxCounter+8+
																"= aux"+auxCounter+2+" < 0 \n aux"+auxCounter+9+"= aux"+auxCounter+" < aux"+
																auxCounter+1+"\n aux"+auxCounter+10+"= aux"+auxCounter+9+" and aux"+auxCounter+8+
																"\n aux"+auxCounter+11+"= aux"+auxCounter+7+" or aux"+auxCounter+10+"\n if aux"+
																auxCounter+11+"then goto fim"+auxCounter+"\n local "+i+"= aux"+auxCounter+
																"\n"+bl.getExpressao()+"\n goto label"+auxCounter+"\n::fim"+auxCounter+"::\n");
														RESULT =  aux;
														:}
		| FOR IDENT:i IGUAL exp:e1 VIRG exp:e2 VIRG exp:e3 DO block:bl END		{:  aux = new No(null, "stat");
														No.novoFilho(aux, "for");
														No.novoFilho(aux, "id");
														No.novoFilho(aux, "=");
														No.novoFilho(aux, e1);
														No.novoFilho(aux, ",");
														No.novoFilho(aux, e2);
														No.novoFilho(aux, ",");
														No.novoFilho(aux, e3);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao("aux"+auxCounter+"="+e1.getValor()+"\n"+"aux"+auxCounter+1+"="+e2.getValor()+"\n"+
																"aux"+auxCounter+2+"="+e3.getValor()+"\n"+"aux"+auxCounter+3+"= "+auxCounter+
																" and "+auxCounter+2+"\n aux"+auxCounter+4+"= aux"+auxCounter+2+" and aux"+auxCounter+
																3+"\n if not("+auxCounter+4+") then goto fim"+auxCounter+"\n aux"+auxCounter+" = "+
																auxCounter+" - aux"+auxCounter+2+"\n ::label"+auxCounter+"::\n aux"+auxCounter+
																"= aux"+auxCounter+" + aux"+auxCounter+2+"\n aux"+auxCounter+5+" = aux"+auxCounter+2+
																" >= 0 \n aux"+auxCounter+6+"= aux"+auxCounter+" > aux"+auxCounter+1+"\n aux"+
																auxCounter+7+"= aux"+auxCounter+5+" and aux"+auxCounter+6+"\n aux"+auxCounter+8+
																"= aux"+auxCounter+2+" < 0 \n aux"+auxCounter+9+"= aux"+auxCounter+" < aux"+
																auxCounter+1+"\n aux"+auxCounter+10+"= aux"+auxCounter+9+" and aux"+auxCounter+8+
																"\n aux"+auxCounter+11+"= aux"+auxCounter+7+" or aux"+auxCounter+10+"\n if aux"+
																auxCounter+11+"then goto fim"+auxCounter+"\n local "+i+"= aux"+auxCounter+
																"\n"+bl.getExpressao()+"\n goto label"+auxCounter+"\n::fim"+auxCounter+"::\n");
														RESULT =  aux;
														:}
		| FOR namelist:nl IN explist:el DO block:bl END		{: aux = new No(null, "stat");
														No.novoFilho(aux, "for");
														No.novoFilho(aux, nl);
														No.novoFilho(aux, "in");
														No.novoFilho(aux, el);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														RESULT =  aux;
														:}
		| IF exp:e THEN block:bl ifeio:i END	{: aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, i);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+i.getExpressao()+"if "+e.getValor()+
																			" then\n"+bl.getExpressao()+i.getValor()+"end\n");
														RESULT =  aux;
														:}
		| IF exp:e THEN block:bl1 ifeio:i ELSE block:bl2 END	{: aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl1);
														No.novoFilho(aux, i);
														No.novoFilho(aux, "else");
														No.novoFilho(aux, bl2);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+i.getExpressao()+"if "+e.getValor()+
																			" then\n"+bl2.getExpressao()+i.getValor()+"else \n"+
																			bl2.getExpressao()+"end\n");
														RESULT =  aux;
														:}
		| IF exp:e THEN block:bl END	{: aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+"if "+e.getValor()+" then\n"+bl.getExpressao()+"end\n");
														RESULT =  aux;
														:}
		| IF exp:e THEN block:bl1 ELSE block:bl2 END	{: aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl1);
														No.novoFilho(aux, "else");
														No.novoFilho(aux, bl2);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+"if "+e.getValor()+" then\n"+bl1.getExpressao()+
																			"else\n"+bl2.getExpressao()+"end\n");
														RESULT =  aux;
														:}
		| FUNCTION funcname:fn funcbody:fb		{: aux = new No(null, "stat");
														No.novoFilho(aux, "function");
														No.novoFilho(aux, fn);
														No.novoFilho(aux, fb);
														aux.setExpressao("function "+fn.getValor()+fb.getValor());
														RESULT =  aux;
														:}
		| LOCAL FUNCTION IDENT:id funcbody:fb		{: aux = new No(null, "stat");
														No.novoFilho(aux, "local");
														No.novoFilho(aux, "function");
														No.novoFilho(aux, "id");
														No.novoFilho(aux, fb);
														aux.setExpressao("function"+id+fb.getValor());
														RESULT =  aux;
														:}
		| LOCAL namelist:nl					{: aux = new No(null, "stat");
														No.novoFilho(aux, "local");
														No.novoFilho(aux, nl);
														aux.setExpressao(nl.getExpressao()+"local "+nl.getValor()+"\n");
														RESULT =  aux;
														:}
		| LOCAL namelist:nl IGUAL explist:el		{: aux = new No(null, "stat");
														No.novoFilho(aux, "local");
														No.novoFilho(aux, nl);
														No.novoFilho(aux, "=");
														No.novoFilho(aux, el);
														aux.setExpressao(nl.getExpressao()+el.getExpressao()+"local "+nl.getValor()+" = "+el.getValor());
														RESULT =  aux;
														:}
		;
ifeio ::= ifeio:i ELSEIF exp:e THEN block:bl {: aux = new No(null, "ifeio");
												No.novoFilho(aux, i);
												No.novoFilho(aux, "elseif");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "then");
												No.novoFilho(aux, bl);
												aux.setExpressao(i.getExpressao()+ e.getExpressao());
												aux.setValor(i.getValor()+"elseif "+e.getValor()+" then \n"+bl.getExpressao());
												RESULT =  aux;
												:}
		| ELSEIF exp:e THEN block:bl {: aux = new No(null, "ifeio");
												No.novoFilho(aux, "elseif");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "then");
												No.novoFilho(aux, bl);
												aux.setExpressao(e.getExpressao());
												aux.setValor("elseif "+e.getValor()+" then \n"+bl.getExpressao());
												RESULT =  aux;
												:}
		;
laststat ::= RETURN 				{: aux = new No(null, "laststat");
											No.novoFilho(aux, "return");
											aux.setExpressao("return\n");
											RESULT =  aux;
											:}
		| RETURN explist:el			{: aux = new No(null, "laststat");
											No.novoFilho(aux, "return");
											No.novoFilho(aux, el);
											aux.setExpressao(el.getExpressao()+"return "+el.getValor()+"\n");
											RESULT =  aux;
											:}
		| BREAK						{: aux = new No(null, "laststat");
										No.novoFilho(aux, "break");
										aux.setExpressao("break\n");
										RESULT =  aux;
										:}
		;
funcname ::= funcname2:fn2 IDENT:id  {: aux = new No(null, "funcname");
											No.novoFilho(aux, fn2);
											No.novoFilho(aux, "id");
											aux.setValor(fn2.getValor()+id);
											RESULT =  aux;
											:}
		|   funcname2:fn2 IDENT:id PONTOS IDENT:id2	{: aux = new No(null, "funcname");
											No.novoFilho(aux, fn2);
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ":");
											No.novoFilho(aux, "id");
											aux.setValor(fn2.getValor()+id+":"+id2);
											RESULT =  aux;
											:}
		|	 IDENT:id  {: aux = new No(null, "funcname");
											No.novoFilho(aux, "id");
											aux.setValor(id);
											RESULT =  aux;
											:}
		|   IDENT:id PONTOS IDENT:id2	{: aux = new No(null, "funcname");
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ":");
											No.novoFilho(aux, "id");
											aux.setValor(id+":"+id2);
											RESULT =  aux;
											:}
		;
funcname2 ::= funcname2:fn2	IDENT:id PONTO  {: aux = new No(null, "funcname2");
											No.novoFilho(aux, fn2);
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ".");
											aux.setValor(fn2.getValor()+id+".");
											RESULT =  aux;
										:}
		| IDENT:id PONTO  {: aux = new No(null, "funcname2");
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ".");
											aux.setValor(id+".");
											RESULT =  aux;
										:}
		;
funcbody ::= PARENE parlist:pl PAREND block:bl END {: aux = new No(null, "funcbody");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, pl);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, bl);
												No.novoFilho(aux, "end");
												aux.setValor("("+pl.getValor()+")\n"+bl.getExpressao()+"end\n");
												RESULT =  aux;
												:}
		| PARENE PAREND block:bl END	{: 	aux = new No(null, "funcbody");
										No.novoFilho(aux, "(");
										No.novoFilho(aux, ")");
										No.novoFilho(aux, bl);
										No.novoFilho(aux, "end");
										aux.setValor("()\n"+bl.getExpressao()+"end\n");
										RESULT =  aux;
										:}
		;
parlist ::= namelist:nl VIRG TPONTOS	{:	aux = new No(null, "parlist");
											No.novoFilho(aux, nl);
											No.novoFilho(aux, ",");
											No.novoFilho(aux, "...");
											aux.setValor(nl.getValor()+", ...");
											RESULT =  aux;
											:}
		| namelist:nl						{: 	aux = new No(null, "parlist");
											No.novoFilho(aux, nl);
											aux.setValor(nl.getValor());
											RESULT =  aux;
											:}
		| TPONTOS						{: 	aux = new No(null, "parlist");
											No.novoFilho(aux, "...");
											aux.setValor("...");
											RESULT =  aux;
											:}
		;
var ::= IDENT:n							{: aux = new No(null, "var");
											No.novoFilho(aux, "id:"+n);
											aux.setValor(n);
											RESULT =  aux;
											:}
		| var:v COLCHEE exp:e COLCHED		{: aux = new No(null, "var");
												No.novoFilho(aux, v);
												No.novoFilho(aux, "[");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "]");
												aux.setExpressao(v.getExpressao()+e.getExpressao());
												aux.setValor(v.getValor()+"["+e.getValor()+"]");
												RESULT =  aux;
												:}
		| var:v PONTO IDENT:id				{: aux = new No(null, "var");
												No.novoFilho(aux, v);
												No.novoFilho(aux, ".");
												No.novoFilho(aux, "id");
												aux.setExpressao(v.getExpressao());
												aux.setValor(v.getValor()+"."+id);
												RESULT =  aux;
												:}
		| functioncall:fc COLCHEE exp:e COLCHED		{: aux = new No(null, "var");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, "[");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "]");
												aux.setExpressao(fc.getExpressao()+e.getExpressao());
												aux.setValor(fc.getValor()+"["+e.getValor()+"]");
												aux.setEnds(fc.getEnds()+e.getEnds());
												RESULT =  aux;
												:}
		| functioncall:fc PONTO IDENT:id				{: aux = new No(null, "var");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, ".");
												No.novoFilho(aux, "id");
												aux.setExpressao(fc.getExpressao());
												aux.setValor(fc.getValor()+"."+id);
												aux.setEnds(fc.getEnds()+1);
												RESULT =  aux;
												:}
		| PARENE exp:e1 PAREND COLCHEE exp:e2 COLCHED		{: aux = new No(null, "var");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, "[");
												No.novoFilho(aux, e2);
												No.novoFilho(aux, "]");
												aux.setExpressao(e1.getExpressao()+e2.getExpressao());
												aux.setValor("("+e1.getValor()+")["+e2.getValor()+"]");
												RESULT =  aux;
												:}
		| PARENE exp:e1 PAREND PONTO IDENT:id				{: aux = new No(null, "var");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, ".");
												No.novoFilho(aux, "id");
												aux.setExpressao(e1.getExpressao());
												aux.setValor("("+e1.getValor()+")."+id);
												RESULT =  aux;
												:}
		;
varlist ::= varlist:vl2 VIRG var:v  {: aux = new No(null, "varlist");
												No.novoFilho(aux, vl2);
												No.novoFilho(aux, v);
												aux.setExpressao(vl2.getExpressao()+v.getExpressao());
												aux.setValor(vl2.getValor()+", "+v.getValor());
												RESULT =  aux;
												:}
		|var:v  					{: aux = new No(null, "varlist");
										No.novoFilho(aux, v);
										aux.setExpressao(v.getExpressao());
										aux.setValor(v.getValor());
										aux.setEnds(v.getEnds());
										RESULT =  aux;
										:};
namelist ::= namelist:nl VIRG IDENT:id	{: aux = new No(null, "namelist");
										No.novoFilho(aux, nl);
										No.novoFilho(aux, ",");
										No.novoFilho(aux, "id");
										aux.setValor(nl.getValor()+", "+id);
										RESULT =  aux;
										:}
		|IDENT:id  {: 	aux = new No(null, "namelist");
										No.novoFilho(aux, "id");
										aux.setValor(id);
										RESULT =  aux;
										:}
		;
explist ::= explist:el VIRG exp:e		{: 	aux = new No(null, "explist");
										No.novoFilho(aux, el);										
										No.novoFilho(aux, ",");
										No.novoFilho(aux, e);
										aux.setExpressao(el.getExpressao()+e.getExpressao());
										aux.setValor(el.getValor()+", "+e.getValor());
										aux.setEnds(e.getEnds()+el.getEnds());
										RESULT =  aux;
										:}
		|	exp:e		{: 	aux = new No(null, "explist");
										No.novoFilho(aux, e);
										aux.setExpressao(e.getExpressao());
										aux.setValor(e.getValor());
										aux.setEnds(e.getEnds());
										RESULT =  aux;
										:}
		;
function ::= FUNCTION funcbody:fb 	{:	aux = new No(null, "<function>");
										No.novoFilho(aux, fb);
										aux.setValor("function "+fb.getValor());
										RESULT =  aux;
										:};
exp ::= factor:f 							{: aux = new No(null, "exp");
												No.novoFilho(aux, f);
												aux.setValor(f.getValor());
												aux.setEnds(1);
												RESULT =  aux;
												:}
		| var:v 							{: aux = new No(null, "exp");
												No.novoFilho(aux, v);
												aux.setExpressao(v.getExpressao());
												aux.setValor(v.getValor());
												aux.setEnds(1);
												RESULT =  aux;
												:}
		| PARENE exp:e PAREND					{: aux = new No(null, "exp");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e);
												No.novoFilho(aux, ")");
												aux.setEnds(e.getEnds());
												aux.setValor("("+e.getValor()+")");
												RESULT =  aux;
												:}
		| functioncall:fc						{: aux = new No(null, "exp");
												No.novoFilho(aux, fc);
												aux.setExpressao(fc.getExpressao());
												aux.setValor(fc.getValor());
												aux.setEnds(1+fc.getEnds());
												RESULT =  aux;
												:}
		| function:fun							{: aux = new No(null, "exp");
												No.novoFilho(aux, fun);
												aux.setEnds(1);
												aux.setExpressao("aux"+auxCounter+" = "+fun.getValor()+"\n");
												aux.setValor("aux"+auxCounter);
												RESULT =  aux;
												:}
		| tableconstructor:tc					{: aux = new No(null, "exp");
												No.novoFilho(aux, tc);
												aux.setEnds(1);
												aux.setExpressao(tc.getExpressao());
												aux.setValor(tc.getValor());
												RESULT =  aux;
												:}
		| exp:e1 OR exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "or");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" or ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" or ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 MAIS exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "+");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" + ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" + ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 MENOS exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "-");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" - ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" - ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 VEZES exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "*");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" * ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" * ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 DIVIDE exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "/");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" / ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" / ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 EXPO exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "^");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" ^ ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" ^ ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 RESTO exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "%");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" % ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" % ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 DPONTOS exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "..");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" .. ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" .. ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 MENOR exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "<");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" < ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" < ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 MENORI exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "<=");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" <= ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" <= ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 MAIOR exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ">");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" > ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" > ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 MAIORI exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ">=");
												No.novoFilho(aux, f);
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" >= ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" >= ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 IGUALI exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "==");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" == ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" == ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 TILI exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "~=");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" ~= ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" ~= ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| exp:e1 AND exp:f			{: aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "and");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" and ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" and ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												:}
		| MENOS exp:e						{: aux = new No(null, "exp");
												No.novoFilho(aux, "-");
												No.novoFilho(aux, e);
												aux.setExpressao(e.getExpressao());
												aux.setValor("-"+e.getValor());
												RESULT =  aux; :}
		| NOT exp:e						{: aux = new No(null, "exp");
												No.novoFilho(aux, "not");
												No.novoFilho(aux, e);
												aux.setExpressao(e.getExpressao());
												aux.setValor("not "+e.getValor());
												RESULT =  aux; :}
		| TRALHA exp:e						{: aux = new No(null, "exp");
												No.novoFilho(aux, "#");
												No.novoFilho(aux, e);
												aux.setExpressao(e.getExpressao());
												aux.setValor("#"+e.getValor());
												RESULT =  aux; :}
		;
functioncall ::= var:v args:ar				{: aux = new No(null, "functioncall");
												No.novoFilho(aux, v);
												No.novoFilho(aux, ar);
												aux.setExpressao(v.getExpressao()+ar.getExpressao());
												aux.setValor(v.getValor()+ar.getValor());
												aux.setEnds(v.getEnds()+ar.getEnds());
												RESULT =  aux;
												:}
		| var:v PONTOS IDENT:id args:ar		{: aux = new No(null, "functioncall");
												No.novoFilho(aux, v);
												No.novoFilho(aux, ":");
												No.novoFilho(aux, "id");
												No.novoFilho(aux, ar);
												aux.setEnds(v.getEnds()+ar.getEnds()+1);
												aux.setExpressao(v.getExpressao()+ar.getExpressao());
												aux.setValor(v.getValor()+":"+id+ar.getValor());
												RESULT =  aux;
												:}
		| functioncall:fc args:ar				{: aux = new No(null, "functioncall");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, ar);
												aux.setEnds(fc.getEnds()+ar.getEnds());
												aux.setExpressao(fc.getExpressao()+ar.getExpressao());
												aux.setValor(fc.getValor()+ar.getValor());
												RESULT =  aux;
												:}
		| functioncall:fc PONTOS IDENT:id args:ar		{: aux = new No(null, "functioncall");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, ":");
												No.novoFilho(aux, "id");
												No.novoFilho(aux, ar);
												aux.setEnds(fc.getEnds()+ar.getEnds()+1);
												aux.setExpressao(fc.getExpressao()+ar.getExpressao());
												aux.setValor(fc.getValor()+":"+id+ar.getValor());
												RESULT =  aux;
												:}
		| PARENE exp:e PAREND args:ar				{: aux = new No(null, "functioncall");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, ar);
												aux.setEnds(e.getEnds()+ar.getEnds());
												aux.setExpressao(e.getExpressao()+ar.getExpressao());
												aux.setValor("("+e.getValor()+")"+ar.getValor());
												RESULT =  aux;
												:}
		| PARENE exp:e PAREND PONTOS IDENT:id args:ar	{: aux = new No(null, "functioncall");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, ":");
												No.novoFilho(aux, "id");
												No.novoFilho(aux, ar);
												aux.setEnds(e.getEnds()+ar.getEnds()+1);
												aux.setExpressao(e.getExpressao()+ar.getExpressao());
												aux.setValor("("+e.getValor()+"):"+id+ar.getValor());
												RESULT =  aux;
												:}
		;
args ::= PARENE explist:el PAREND				{:	aux = new No(null, "args");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, el);
												No.novoFilho(aux, ")");
												aux.setExpressao(el.getExpressao());
												aux.setValor("("+el.getValor()+")");
												aux.setEnds(el.getEnds());
												RESULT =  aux;
												:}
		| PARENE PAREND						{: 	aux = new No(null, "args");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, ")");
												aux.setValor("()");
												RESULT =  aux;
												:}
		| tableconstructor:tc				{: 	aux = new No(null, "args");
												No.novoFilho(aux, tc);
												aux.setExpressao(tc.getExpressao());
												aux.setValor(tc.getValor());
												aux.setEnds(1);
												RESULT =  aux;
												:}
		| STRING:s							{: 	aux = new No(null, "args");
												No.novoFilho(aux, "string");
												aux.setValor(s);
												aux.setEnds(1);
												RESULT =  aux;
												:}
		;
tableconstructor ::= CHAVEE fieldlist:fl CHAVED {:	aux = new No(null, "tableconstructor");
													No.novoFilho(aux,"{");
													No.novoFilho(aux, fl);
													No.novoFilho(aux,"}");
													aux.setExpressao(fl.getExpressao());
													aux.setValor("{"+fl.getValor()+"}");
													RESULT =  aux;
													:}
		| CHAVEE CHAVED		{: 	aux = new No(null, "tableconstructor");
								No.novoFilho(aux,"{");
								No.novoFilho(aux,"}");
								aux.setValor("[]");
								RESULT =  aux;
								:}
		;
fieldlist ::= field:f fieldlist2:fl2  {:	aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											No.novoFilho(aux, fl2);
											aux.setExpressao(f.getExpressao()+fl2.getExpressao());
											aux.setValor(f.getValor()+fl2.getValor());
											RESULT =  aux;
											:}
		| field:f fieldlist2:fl2 fieldsep:fs {:	aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											No.novoFilho(aux, fl2);
											No.novoFilho(aux, fs);
											aux.setExpressao(f.getExpressao()+fl2.getExpressao());
											aux.setValor(f.getValor()+fl2.getValor());
											RESULT =  aux;
											:}
		| field:f   {:	aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											aux.setExpressao(f.getExpressao());
											aux.setValor(f.getValor());
											RESULT =  aux;
											:}
		| field:f  fieldsep:fs {:	aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											No.novoFilho(aux, fs);
											aux.setExpressao(f.getExpressao());
											aux.setValor(f.getValor());
											RESULT =  aux;
											:}
		;
fieldlist2 ::= fieldlist2:fl2 fieldsep:fs field:f 	{: 	aux = new No(null, "fieldlist2");
														No.novoFilho(aux, fl2);
														No.novoFilho(aux, fs);
														No.novoFilho(aux, f);
														aux.setExpressao(fl2.getExpressao()+f.getExpressao());
														aux.setValor(fl2.getValor()+fs.getValor()+f.getValor());
														RESULT =  aux;
														:}
		| fieldsep:fs field:f 	{: 	aux = new No(null, "fieldlist2");
														No.novoFilho(aux, fs);
														No.novoFilho(aux, f);
														aux.setExpressao(f.getExpressao());
														aux.setValor(fs.getValor()+f.getValor());
														RESULT =  aux;
														:}
		;
field ::= COLCHEE exp:e1 COLCHED IGUAL exp:e2 	{:	aux = new No(null, "field");
													No.novoFilho(aux,"[");
													No.novoFilho(aux, e1);
													No.novoFilho(aux,"]");
													No.novoFilho(aux,"=");
													No.novoFilho(aux, e2);
													aux.setExpressao(e1.getExpressao()+e2.getExpressao());
													aux.setValor("["+e1.getValor()+"] = "+e2.getValor());
													RESULT =  aux;
													:}
		| IDENT:id IGUAL exp:e		{:	aux = new No(null, "field");
										No.novoFilho(aux, "id");
										No.novoFilho(aux, "=");
										No.novoFilho(aux, e);
										aux.setExpressao(e.getExpressao());
										aux.setValor(id+" = "+e.getValor());
										RESULT =  aux;
										:}
		| exp:e		{:	aux = new No(null, "field");
						No.novoFilho(aux, e);
						aux.setExpressao(e.getExpressao());
						aux.setValor(e.getValor());
						RESULT =  aux;
						:}
		;
fieldsep ::= VIRG	{: 	aux = new No(null, "fieldsep");
						No.novoFilho(aux,",");
						aux.setValor(",");
						RESULT =  aux;
						:}
		| PVIRG		{: 	aux = new No(null, "fieldsep");
						No.novoFilho(aux,";");
						aux.setValor(";");
						RESULT =  aux;
						:}
		;		
factor ::= NIL									{: aux = new No(null, "factor");
												No.novoFilho(aux, "nil");
												aux.setValor("nil");
												aux.setEnds(1);
												RESULT =  aux;
												:}
		| FALSE								{:	aux = new No(null, "factor");
												No.novoFilho(aux, "false");
												aux.setValor("false");
												aux.setEnds(1);
												RESULT =  aux;
												:}
		| TRUE								{: aux = new No(null, "factor");
												No.novoFilho(aux, "true");
												aux.setEnds(1);
												aux.setValor("true");
												RESULT =  aux;
												:}
		| REAL:n								{: aux = new No(null, "factor");
												No.novoFilho(aux, "real");
												aux.setEnds(1);
												aux.setValor(""+n);
												RESULT =  aux;
												:}
		| INT:n								{: aux = new No(null, "factor");
												No.novoFilho(aux, "int");
												aux.setEnds(1);
												aux.setValor(""+n);
												RESULT =  aux;
												:}
		| STRING:n							{: aux = new No(null, "factor");
												No.novoFilho(aux, "str");
												aux.setEnds(1);
												aux.setValor(n);
												RESULT =  aux;
												:}
		;
		