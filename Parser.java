
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.*;
import java.io.*;
import codigo.No;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\003\000\002\003\004" +
    "\000\002\003\002\000\002\004\004\000\002\004\005\000" +
    "\002\004\003\000\002\004\004\000\002\002\003\000\002" +
    "\005\005\000\002\005\003\000\002\005\005\000\002\005" +
    "\007\000\002\005\006\000\002\005\013\000\002\005\015" +
    "\000\002\005\011\000\002\005\010\000\002\005\012\000" +
    "\002\005\007\000\002\005\011\000\002\005\005\000\002" +
    "\005\006\000\002\005\004\000\002\005\006\000\002\030" +
    "\007\000\002\030\006\000\002\006\003\000\002\006\004" +
    "\000\002\006\003\000\002\014\004\000\002\014\006\000" +
    "\002\014\003\000\002\014\005\000\002\015\005\000\002" +
    "\015\004\000\002\016\007\000\002\016\006\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\017\003" +
    "\000\002\017\006\000\002\017\005\000\002\017\006\000" +
    "\002\017\005\000\002\017\010\000\002\017\007\000\002" +
    "\007\005\000\002\007\003\000\002\013\005\000\002\013" +
    "\003\000\002\010\005\000\002\010\003\000\002\020\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\011\004\000\002\011\006" +
    "\000\002\011\004\000\002\011\006\000\002\011\006\000" +
    "\002\011\010\000\002\022\005\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\021\005\000\002\021" +
    "\004\000\002\024\004\000\002\024\005\000\002\024\003" +
    "\000\002\024\004\000\002\025\005\000\002\025\004\000" +
    "\002\026\007\000\002\026\005\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\032\002\ufffb\005\017\006\014\013\022\014" +
    "\012\015\013\017\010\023\025\024\011\030\005\037\007" +
    "\065\004\001\002\000\130\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\056\uffd5\057\uffd5\061\uffd5\062\uffd5\065\uffd5\066" +
    "\uffd5\001\002\000\034\012\050\014\037\020\042\021\035" +
    "\026\041\033\031\037\033\041\034\060\046\063\032\064" +
    "\052\065\004\066\043\001\002\000\016\002\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\027\ufffd\035\336\001\002\000\034\012" +
    "\050\014\037\020\042\021\035\026\041\033\031\037\033" +
    "\041\034\060\046\063\032\064\052\065\004\066\043\001" +
    "\002\000\006\014\327\065\151\001\002\000\050\002\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\050\014\037\020\042\021" +
    "\035\026\041\027\uffe3\033\031\035\uffe3\037\033\041\034" +
    "\060\046\063\032\064\052\065\004\066\043\001\002\000" +
    "\004\065\314\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\032\005\017" +
    "\006\014\011\ufffb\013\022\014\012\015\013\017\010\023" +
    "\025\024\011\030\005\037\007\065\004\001\002\000\004" +
    "\002\263\001\002\000\056\002\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4" +
    "\023\ufff4\024\ufff4\027\ufff4\030\ufff4\035\ufff4\037\057\041" +
    "\034\051\136\052\137\061\135\065\ufff4\066\053\001\002" +
    "\000\016\002\uffe1\007\uffe1\010\uffe1\011\uffe1\027\uffe1\035" +
    "\uffe1\001\002\000\044\002\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\023" +
    "\ufff8\024\ufff8\027\ufff8\030\ufff8\035\262\037\ufff8\065\ufff8" +
    "\001\002\000\022\036\uffcd\037\057\041\034\043\uffcd\051" +
    "\056\052\061\061\055\066\053\001\002\000\004\065\237" +
    "\001\002\000\006\036\232\043\231\001\002\000\042\002" +
    "\001\005\017\006\014\007\001\010\001\011\001\013\022" +
    "\014\012\015\013\017\010\023\025\024\011\027\001\030" +
    "\005\037\007\065\004\001\002\000\032\005\017\006\014" +
    "\013\022\014\012\015\013\017\010\023\025\024\011\027" +
    "\ufffb\030\005\037\007\065\004\001\002\000\004\027\030" +
    "\001\002\000\012\007\ufff6\010\ufff6\011\ufff6\027\ufff6\001" +
    "\002\000\034\012\050\014\037\020\042\021\035\026\041" +
    "\033\031\037\033\041\034\060\046\063\032\064\052\065" +
    "\004\066\043\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\114\002\uff94" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\013" +
    "\uff94\014\uff94\015\uff94\017\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\042\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\053\uff94\054\uff94\056" +
    "\uff94\057\uff94\062\uff94\065\uff94\001\002\000\034\012\050" +
    "\014\037\020\042\021\035\026\041\033\031\037\033\041" +
    "\034\060\046\063\032\064\052\065\004\066\043\001\002" +
    "\000\040\012\050\014\037\020\042\021\035\026\041\033" +
    "\031\037\033\041\034\042\167\060\046\061\171\063\032" +
    "\064\052\065\166\066\043\001\002\000\034\012\050\014" +
    "\037\020\042\021\035\026\041\033\031\037\033\041\034" +
    "\060\046\063\032\064\052\065\004\066\043\001\002\000" +
    "\114\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\053\uffc3" +
    "\054\uffc3\056\uffc3\057\uffc3\062\uffc3\065\uffc3\001\002\000" +
    "\004\037\145\001\002\000\102\002\ufff1\004\067\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\022\105\023\ufff1\024\ufff1\027\ufff1\030\ufff1" +
    "\031\101\032\070\033\072\034\071\035\ufff1\037\ufff1\044" +
    "\102\045\074\046\073\047\103\050\100\053\076\054\077" +
    "\056\104\057\075\065\ufff1\001\002\000\114\002\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\013\uff96" +
    "\014\uff96\015\uff96\017\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\042\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\053\uff96\054\uff96\056\uff96" +
    "\057\uff96\062\uff96\065\uff96\001\002\000\114\002\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\013\uff98" +
    "\014\uff98\015\uff98\017\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\042\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\053\uff98\054\uff98\056\uff98" +
    "\057\uff98\062\uff98\065\uff98\001\002\000\114\002\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\013\uff93" +
    "\014\uff93\015\uff93\017\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\042\uff93\044\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\053\uff93\054\uff93\056\uff93" +
    "\057\uff93\062\uff93\065\uff93\001\002\000\126\002\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\017\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\057\040\uffc4\041\034\042\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\136\052\137" +
    "\053\uffc4\054\uffc4\056\uffc4\057\uffc4\061\135\062\uffc4\065" +
    "\uffc4\066\053\001\002\000\114\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7\062" +
    "\uffc7\065\uffc7\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\114\002\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\053\uffc2\054\uffc2\056" +
    "\uffc2\057\uffc2\062\uffc2\065\uffc2\001\002\000\114\002\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\013" +
    "\uff97\014\uff97\015\uff97\017\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\042\uff97\044\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\053\uff97\054\uff97\056" +
    "\uff97\057\uff97\062\uff97\065\uff97\001\002\000\126\002\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\057\040\uffc6\041\034\042\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\056\052" +
    "\061\053\uffc6\054\uffc6\056\uffc6\057\uffc6\061\055\062\uffc6" +
    "\065\uffc6\066\053\001\002\000\114\002\uff95\004\uff95\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\011\uff95\013\uff95\014\uff95" +
    "\015\uff95\017\uff95\022\uff95\023\uff95\024\uff95\025\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\042\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\050\uff95\053\uff95\054\uff95\056\uff95\057\uff95" +
    "\062\uff95\065\uff95\001\002\000\126\002\uffa6\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\017\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6\065\uffa6\066" +
    "\uffa6\001\002\000\126\002\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\017" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056" +
    "\uffaf\057\uffaf\061\uffaf\062\uffaf\065\uffaf\066\uffaf\001\002" +
    "\000\034\012\050\014\037\020\042\021\035\026\041\033" +
    "\031\037\033\041\034\060\046\063\032\064\052\065\004" +
    "\066\043\001\002\000\004\065\130\001\002\000\036\012" +
    "\050\014\037\020\042\021\035\026\041\033\031\037\033" +
    "\040\065\041\034\060\046\063\032\064\052\065\004\066" +
    "\043\001\002\000\126\002\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7\015\uffa7\017" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056" +
    "\uffa7\057\uffa7\061\uffa7\062\uffa7\065\uffa7\066\uffa7\001\002" +
    "\000\004\065\062\001\002\000\010\037\057\041\034\066" +
    "\053\001\002\000\126\002\uffae\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015\uffae\017" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\056" +
    "\uffae\057\uffae\061\uffae\062\uffae\065\uffae\066\uffae\001\002" +
    "\000\006\036\125\040\126\001\002\000\126\002\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\017\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\056\uffa8\057\uffa8\061\uffa8\062\uffa8\065" +
    "\uffa8\066\uffa8\001\002\000\106\002\uffc9\004\067\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\017\uffc9\022\105\023\uffc9\024\uffc9\027\uffc9\030\uffc9" +
    "\031\101\032\070\033\072\034\071\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\044\102\045\074\046\073\047\103\050\100" +
    "\053\076\054\077\056\104\057\075\065\uffc9\001\002\000" +
    "\034\012\050\014\037\020\042\021\035\026\041\033\031" +
    "\037\033\041\034\060\046\063\032\064\052\065\004\066" +
    "\043\001\002\000\034\012\050\014\037\020\042\021\035" +
    "\026\041\033\031\037\033\041\034\060\046\063\032\064" +
    "\052\065\004\066\043\001\002\000\034\012\050\014\037" +
    "\020\042\021\035\026\041\033\031\037\033\041\034\060" +
    "\046\063\032\064\052\065\004\066\043\001\002\000\034" +
    "\012\050\014\037\020\042\021\035\026\041\033\031\037" +
    "\033\041\034\060\046\063\032\064\052\065\004\066\043" +
    "\001\002\000\034\012\050\014\037\020\042\021\035\026" +
    "\041\033\031\037\033\041\034\060\046\063\032\064\052" +
    "\065\004\066\043\001\002\000\034\012\050\014\037\020" +
    "\042\021\035\026\041\033\031\037\033\041\034\060\046" +
    "\063\032\064\052\065\004\066\043\001\002\000\034\012" +
    "\050\014\037\020\042\021\035\026\041\033\031\037\033" +
    "\041\034\060\046\063\032\064\052\065\004\066\043\001" +
    "\002\000\034\012\050\014\037\020\042\021\035\026\041" +
    "\033\031\037\033\041\034\060\046\063\032\064\052\065" +
    "\004\066\043\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\034\012\050" +
    "\014\037\020\042\021\035\026\041\033\031\037\033\041" +
    "\034\060\046\063\032\064\052\065\004\066\043\001\002" +
    "\000\034\012\050\014\037\020\042\021\035\026\041\033" +
    "\031\037\033\041\034\060\046\063\032\064\052\065\004" +
    "\066\043\001\002\000\034\012\050\014\037\020\042\021" +
    "\035\026\041\033\031\037\033\041\034\060\046\063\032" +
    "\064\052\065\004\066\043\001\002\000\034\012\050\014" +
    "\037\020\042\021\035\026\041\033\031\037\033\041\034" +
    "\060\046\063\032\064\052\065\004\066\043\001\002\000" +
    "\034\012\050\014\037\020\042\021\035\026\041\033\031" +
    "\037\033\041\034\060\046\063\032\064\052\065\004\066" +
    "\043\001\002\000\034\012\050\014\037\020\042\021\035" +
    "\026\041\033\031\037\033\041\034\060\046\063\032\064" +
    "\052\065\004\066\043\001\002\000\114\002\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\017\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\027\uffc1\030\uffc1\031\101\032\070\033\072\034\071\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\044\102\045\074" +
    "\046\073\047\103\050\100\053\076\054\077\056\104\057" +
    "\075\062\uffc1\065\uffc1\001\002\000\114\002\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\017\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\053\uffbc\054\077\056\104\057" +
    "\uffbc\062\uffbc\065\uffbc\001\002\000\114\002\uffb8\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\017\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\031\101\032\070\033\072\034\071\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\042\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\053\uffb8\054\077\056\104\057" +
    "\075\062\uffb8\065\uffb8\001\002\000\114\002\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\017\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\027\uffb5\030\uffb5\031\101\032\070\033\072\034\071\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\044\uffb5\045\074" +
    "\046\073\047\103\050\100\053\uffb5\054\077\056\104\057" +
    "\075\062\uffb5\065\uffb5\001\002\000\114\002\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\072\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\053\uffbe\054\077\056\104\057" +
    "\uffbe\062\uffbe\065\uffbe\001\002\000\114\002\uffb6\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\017\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\031\101\032\070\033\072\034\071\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\053\uffb6\054\077\056\104\057" +
    "\075\062\uffb6\065\uffb6\001\002\000\114\002\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\013\uffba\014" +
    "\uffba\015\uffba\017\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\042\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\053\uffba\054\077\056\104\057" +
    "\uffba\062\uffba\065\uffba\001\002\000\114\002\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\017\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\030\uffb4\031\101\032\070\033\072\034\071\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\044\uffb4\045\074" +
    "\046\073\047\103\050\100\053\uffb4\054\077\056\104\057" +
    "\075\062\uffb4\065\uffb4\001\002\000\114\002\uffbb\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\017\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\072\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\053\uffbb\054\077\056\104\057" +
    "\uffbb\062\uffbb\065\uffbb\001\002\000\114\002\uffb9\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\027\uffb9\030\uffb9\031\101\032\070\033\072\034\071\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\053\uffb9\054\077\056\104\057" +
    "\075\062\uffb9\065\uffb9\001\002\000\114\002\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\017\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\027\uffb7\030\uffb7\031\101\032\070\033\072\034\071\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\042\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\053\uffb7\054\077\056\104\057" +
    "\075\062\uffb7\065\uffb7\001\002\000\114\002\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\053\uffbf\054\077\056\104\057" +
    "\uffbf\062\uffbf\065\uffbf\001\002\000\114\002\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\072\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\053\uffbd\054\077\056\104\057" +
    "\uffbd\062\uffbd\065\uffbd\001\002\000\114\002\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\027\uffc0\030\uffc0\031\101\032\uffc0\033\072\034\071\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\053\uffc0\054\077\056\104\057" +
    "\075\062\uffc0\065\uffc0\001\002\000\114\002\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\017\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\027\uffb3\030\uffb3\031\101\032\070\033\072\034\071\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3\044\102\045\074" +
    "\046\073\047\103\050\100\053\076\054\077\056\104\057" +
    "\075\062\uffb3\065\uffb3\001\002\000\034\012\050\014\037" +
    "\020\042\021\035\026\041\033\031\037\033\041\034\060" +
    "\046\063\032\064\052\065\004\066\043\001\002\000\126" +
    "\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\057\uffa9\061\uffa9" +
    "\062\uffa9\065\uffa9\066\uffa9\001\002\000\106\002\uffca\004" +
    "\067\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\017\uffca\022\105\023\uffca\024\uffca\027" +
    "\uffca\030\uffca\031\101\032\070\033\072\034\071\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\044\102\045\074\046\073\047" +
    "\103\050\100\053\076\054\077\056\104\057\075\065\uffca" +
    "\001\002\000\130\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\056\uffd3\057\uffd3\061\uffd3\062\uffd3\065\uffd3\066\uffd3\001" +
    "\002\000\042\004\067\022\105\031\101\032\070\033\072" +
    "\034\071\044\102\045\074\046\073\047\103\050\100\053" +
    "\076\054\077\056\104\057\075\062\132\001\002\000\130" +
    "\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4" +
    "\061\uffd4\062\uffd4\065\uffd4\066\uffd4\001\002\000\114\002" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\017\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\042\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\053\uffb0\054\077" +
    "\056\104\057\uffb0\062\uffb0\065\uffb0\001\002\000\126\002" +
    "\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\013\uffad\014\uffad\015\uffad\017\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\056\uffad\057\uffad\061\uffad\062" +
    "\uffad\065\uffad\066\uffad\001\002\000\034\012\050\014\037" +
    "\020\042\021\035\026\041\033\031\037\033\041\034\060" +
    "\046\063\032\064\052\065\004\066\043\001\002\000\004" +
    "\065\142\001\002\000\004\065\140\001\002\000\010\037" +
    "\057\041\034\066\053\001\002\000\126\002\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\017\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\056\uffac\057\uffac\061\uffac\062\uffac\065\uffac" +
    "\066\uffac\001\002\000\130\002\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\017\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\056\uffd1\057\uffd1\061\uffd1\062\uffd1\065\uffd1\066" +
    "\uffd1\001\002\000\042\004\067\022\105\031\101\032\070" +
    "\033\072\034\071\044\102\045\074\046\073\047\103\050" +
    "\100\053\076\054\077\056\104\057\075\062\144\001\002" +
    "\000\130\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\061\uffd2\062\uffd2\065\uffd2\066\uffd2\001\002\000" +
    "\010\040\152\055\150\065\151\001\002\000\114\002\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\053\uffc8\054\uffc8\056" +
    "\uffc8\057\uffc8\062\uffc8\065\uffc8\001\002\000\006\036\161" +
    "\040\uffd7\001\002\000\004\040\uffd6\001\002\000\052\002" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\017\uffcb\023\uffcb\024\uffcb\027\uffcb\030" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\043\uffcb\065\uffcb" +
    "\001\002\000\032\005\017\006\014\011\ufffb\013\022\014" +
    "\012\015\013\017\010\023\025\024\011\030\005\037\007" +
    "\065\004\001\002\000\004\040\154\001\002\000\032\005" +
    "\017\006\014\011\ufffb\013\022\014\012\015\013\017\010" +
    "\023\025\024\011\030\005\037\007\065\004\001\002\000" +
    "\004\011\156\001\002\000\114\002\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\042\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\053\uffda\054\uffda\056\uffda\057\uffda\062" +
    "\uffda\065\uffda\001\002\000\004\011\160\001\002\000\114" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\054" +
    "\uffd9\056\uffd9\057\uffd9\062\uffd9\065\uffd9\001\002\000\006" +
    "\055\162\065\163\001\002\000\004\040\uffd8\001\002\000" +
    "\054\002\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\023\uffcc\024" +
    "\uffcc\027\uffcc\030\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\043\uffcc\065\uffcc\001\002\000\114\002\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\017\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\042\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\053\uffb1\054\077\056\104\057\uffb1" +
    "\062\uffb1\065\uffb1\001\002\000\010\035\202\036\204\042" +
    "\uffa1\001\002\000\064\004\uffd5\022\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\042" +
    "\uffd5\043\200\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5\061" +
    "\uffd5\066\uffd5\001\002\000\126\002\uffa4\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\017\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4\065\uffa4\066\uffa4" +
    "\001\002\000\046\004\067\022\105\031\101\032\070\033" +
    "\072\034\071\035\uff9b\036\uff9b\042\uff9b\044\102\045\074" +
    "\046\073\047\103\050\100\053\076\054\077\056\104\057" +
    "\075\001\002\000\034\012\050\014\037\020\042\021\035" +
    "\026\041\033\031\037\033\041\034\060\046\063\032\064" +
    "\052\065\004\066\043\001\002\000\004\042\173\001\002" +
    "\000\126\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\017\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5" +
    "\061\uffa5\062\uffa5\065\uffa5\066\uffa5\001\002\000\042\004" +
    "\067\022\105\031\101\032\070\033\072\034\071\044\102" +
    "\045\074\046\073\047\103\050\100\053\076\054\077\056" +
    "\104\057\075\062\175\001\002\000\004\043\176\001\002" +
    "\000\034\012\050\014\037\020\042\021\035\026\041\033" +
    "\031\037\033\041\034\060\046\063\032\064\052\065\004" +
    "\066\043\001\002\000\046\004\067\022\105\031\101\032" +
    "\070\033\072\034\071\035\uff9d\036\uff9d\042\uff9d\044\102" +
    "\045\074\046\073\047\103\050\100\053\076\054\077\056" +
    "\104\057\075\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\046\004\067" +
    "\022\105\031\101\032\070\033\072\034\071\035\uff9c\036" +
    "\uff9c\042\uff9c\044\102\045\074\046\073\047\103\050\100" +
    "\053\076\054\077\056\104\057\075\001\002\000\040\012" +
    "\uff99\014\uff99\020\uff99\021\uff99\026\uff99\033\uff99\037\uff99" +
    "\041\uff99\042\uff99\060\uff99\061\uff99\063\uff99\064\uff99\065" +
    "\uff99\066\uff99\001\002\000\040\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\042\uffa0\060" +
    "\046\061\171\063\032\064\052\065\166\066\043\001\002" +
    "\000\040\012\uff9a\014\uff9a\020\uff9a\021\uff9a\026\uff9a\033" +
    "\uff9a\037\uff9a\041\uff9a\042\uff9a\060\uff9a\061\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\001\002\000\010\035\202\036" +
    "\204\042\uffa3\001\002\000\040\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\042\uffa2\060" +
    "\046\061\171\063\032\064\052\065\166\066\043\001\002" +
    "\000\010\035\uff9f\036\uff9f\042\uff9f\001\002\000\010\035" +
    "\uff9e\036\uff9e\042\uff9e\001\002\000\042\004\067\022\105" +
    "\031\101\032\070\033\072\034\071\040\212\044\102\045" +
    "\074\046\073\047\103\050\100\053\076\054\077\056\104" +
    "\057\075\001\002\000\126\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\017\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\034\042\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\215\052\216\053\uffc5\054\uffc5" +
    "\056\uffc5\057\uffc5\061\214\062\uffc5\065\uffc5\066\053\001" +
    "\002\000\126\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab\017\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\056\uffab\057" +
    "\uffab\061\uffab\062\uffab\065\uffab\066\uffab\001\002\000\034" +
    "\012\050\014\037\020\042\021\035\026\041\033\031\037" +
    "\033\041\034\060\046\063\032\064\052\065\004\066\043" +
    "\001\002\000\004\065\221\001\002\000\004\065\217\001" +
    "\002\000\010\037\057\041\034\066\053\001\002\000\126" +
    "\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa\061\uffaa" +
    "\062\uffaa\065\uffaa\066\uffaa\001\002\000\130\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\061\uffcf\062" +
    "\uffcf\065\uffcf\066\uffcf\001\002\000\042\004\067\022\105" +
    "\031\101\032\070\033\072\034\071\044\102\045\074\046" +
    "\073\047\103\050\100\053\076\054\077\056\104\057\075" +
    "\062\223\001\002\000\130\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\056\uffd0\057\uffd0\061\uffd0\062\uffd0\065\uffd0\066" +
    "\uffd0\001\002\000\114\002\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\017" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\042\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\053\uffb2\054\077\056\104\057\uffb2\062\uffb2\065" +
    "\uffb2\001\002\000\044\002\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\023" +
    "\ufffa\024\ufffa\027\ufffa\030\ufffa\035\230\037\ufffa\065\ufffa" +
    "\001\002\000\016\002\uffff\007\uffff\010\uffff\011\uffff\027" +
    "\uffff\035\227\001\002\000\014\002\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\027\ufffe\001\002\000\042\002\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\017\ufff9\023\ufff9\024\ufff9\027\ufff9\030\ufff9\037\ufff9\065" +
    "\ufff9\001\002\000\034\012\050\014\037\020\042\021\035" +
    "\026\041\033\031\037\033\041\034\060\046\063\032\064" +
    "\052\065\004\066\043\001\002\000\006\037\007\065\004" +
    "\001\002\000\016\037\057\041\034\051\136\052\137\061" +
    "\135\066\053\001\002\000\022\036\uffce\037\057\041\034" +
    "\043\uffce\051\056\052\061\061\055\066\053\001\002\000" +
    "\046\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\017\ufff5\023\ufff5\024\ufff5\027" +
    "\ufff5\030\ufff5\035\ufff5\036\125\037\ufff5\065\ufff5\001\002" +
    "\000\006\016\254\036\255\001\002\000\010\016\uffcb\036" +
    "\uffcb\043\240\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\042\004\067" +
    "\022\105\031\101\032\070\033\072\034\071\036\242\044" +
    "\102\045\074\046\073\047\103\050\100\053\076\054\077" +
    "\056\104\057\075\001\002\000\034\012\050\014\037\020" +
    "\042\021\035\026\041\033\031\037\033\041\034\060\046" +
    "\063\032\064\052\065\004\066\043\001\002\000\044\004" +
    "\067\006\245\022\105\031\101\032\070\033\072\034\071" +
    "\036\244\044\102\045\074\046\073\047\103\050\100\053" +
    "\076\054\077\056\104\057\075\001\002\000\034\012\050" +
    "\014\037\020\042\021\035\026\041\033\031\037\033\041" +
    "\034\060\046\063\032\064\052\065\004\066\043\001\002" +
    "\000\032\005\017\006\014\011\ufffb\013\022\014\012\015" +
    "\013\017\010\023\025\024\011\030\005\037\007\065\004" +
    "\001\002\000\004\011\247\001\002\000\044\002\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\017\ufff0\023\ufff0\024\ufff0\027\ufff0\030\ufff0\035" +
    "\ufff0\037\ufff0\065\ufff0\001\002\000\042\004\067\006\251" +
    "\022\105\031\101\032\070\033\072\034\071\044\102\045" +
    "\074\046\073\047\103\050\100\053\076\054\077\056\104" +
    "\057\075\001\002\000\032\005\017\006\014\011\ufffb\013" +
    "\022\014\012\015\013\017\010\023\025\024\011\030\005" +
    "\037\007\065\004\001\002\000\004\011\253\001\002\000" +
    "\044\002\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\013\uffef\014\uffef\015\uffef\017\uffef\023\uffef\024\uffef\027" +
    "\uffef\030\uffef\035\uffef\037\uffef\065\uffef\001\002\000\034" +
    "\012\050\014\037\020\042\021\035\026\041\033\031\037" +
    "\033\041\034\060\046\063\032\064\052\065\004\066\043" +
    "\001\002\000\004\065\163\001\002\000\006\006\257\036" +
    "\125\001\002\000\032\005\017\006\014\011\ufffb\013\022" +
    "\014\012\015\013\017\010\023\025\024\011\030\005\037" +
    "\007\065\004\001\002\000\004\011\261\001\002\000\044" +
    "\002\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\013" +
    "\uffee\014\uffee\015\uffee\017\uffee\023\uffee\024\uffee\027\uffee" +
    "\030\uffee\035\uffee\037\uffee\065\uffee\001\002\000\042\002" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\017\ufff7\023\ufff7\024\ufff7\027\ufff7\030" +
    "\ufff7\037\ufff7\065\ufff7\001\002\000\004\002\000\001\002" +
    "\000\004\011\265\001\002\000\044\002\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\017\ufff3\023\ufff3\024\ufff3\027\ufff3\030\ufff3\035\ufff3\037" +
    "\ufff3\065\ufff3\001\002\000\042\004\067\022\105\025\267" +
    "\031\101\032\070\033\072\034\071\044\102\045\074\046" +
    "\073\047\103\050\100\053\076\054\077\056\104\057\075" +
    "\001\002\000\036\005\017\006\014\007\ufffb\010\ufffb\011" +
    "\ufffb\013\022\014\012\015\013\017\010\023\025\024\011" +
    "\030\005\037\007\065\004\001\002\000\010\007\272\010" +
    "\271\011\274\001\002\000\034\012\050\014\037\020\042" +
    "\021\035\026\041\033\031\037\033\041\034\060\046\063" +
    "\032\064\052\065\004\066\043\001\002\000\032\005\017" +
    "\006\014\011\ufffb\013\022\014\012\015\013\017\010\023" +
    "\025\024\011\030\005\037\007\065\004\001\002\000\010" +
    "\007\275\010\276\011\277\001\002\000\044\002\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\023\uffeb\024\uffeb\027\uffeb\030\uffeb\035" +
    "\uffeb\037\uffeb\065\uffeb\001\002\000\032\005\017\006\014" +
    "\011\ufffb\013\022\014\012\015\013\017\010\023\025\024" +
    "\011\030\005\037\007\065\004\001\002\000\034\012\050" +
    "\014\037\020\042\021\035\026\041\033\031\037\033\041" +
    "\034\060\046\063\032\064\052\065\004\066\043\001\002" +
    "\000\044\002\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\023\uffed\024\uffed" +
    "\027\uffed\030\uffed\035\uffed\037\uffed\065\uffed\001\002\000" +
    "\042\004\067\022\105\025\301\031\101\032\070\033\072" +
    "\034\071\044\102\045\074\046\073\047\103\050\100\053" +
    "\076\054\077\056\104\057\075\001\002\000\036\005\017" +
    "\006\014\007\ufffb\010\ufffb\011\ufffb\013\022\014\012\015" +
    "\013\017\010\023\025\024\011\030\005\037\007\065\004" +
    "\001\002\000\010\007\uffe5\010\uffe5\011\uffe5\001\002\000" +
    "\004\011\304\001\002\000\044\002\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\015\uffec\017" +
    "\uffec\023\uffec\024\uffec\027\uffec\030\uffec\035\uffec\037\uffec" +
    "\065\uffec\001\002\000\004\011\306\001\002\000\044\002" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\014\uffea\015\uffea\017\uffea\023\uffea\024\uffea\027\uffea\030" +
    "\uffea\035\uffea\037\uffea\065\uffea\001\002\000\042\004\067" +
    "\022\105\025\310\031\101\032\070\033\072\034\071\044" +
    "\102\045\074\046\073\047\103\050\100\053\076\054\077" +
    "\056\104\057\075\001\002\000\036\005\017\006\014\007" +
    "\ufffb\010\ufffb\011\ufffb\013\022\014\012\015\013\017\010" +
    "\023\025\024\011\030\005\037\007\065\004\001\002\000" +
    "\010\007\uffe4\010\uffe4\011\uffe4\001\002\000\004\037\145" +
    "\001\002\000\004\065\320\001\002\000\010\037\uffde\051" +
    "\315\052\316\001\002\000\004\065\uffdb\001\002\000\004" +
    "\065\317\001\002\000\004\037\uffdd\001\002\000\010\037" +
    "\uffe0\051\321\052\322\001\002\000\004\065\uffdc\001\002" +
    "\000\004\065\323\001\002\000\004\037\uffdf\001\002\000" +
    "\044\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\017\uffe9\023\uffe9\024\uffe9\027" +
    "\uffe9\030\uffe9\035\uffe9\037\uffe9\065\uffe9\001\002\000\020" +
    "\002\uffe2\007\uffe2\010\uffe2\011\uffe2\027\uffe2\035\uffe2\036" +
    "\125\001\002\000\050\002\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\023" +
    "\uffe7\024\uffe7\027\uffe7\030\uffe7\035\uffe7\036\255\037\uffe7" +
    "\043\332\065\uffe7\001\002\000\004\065\330\001\002\000" +
    "\004\037\145\001\002\000\044\002\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\023\uffe8\024\uffe8\027\uffe8\030\uffe8\035\uffe8\037\uffe8" +
    "\065\uffe8\001\002\000\034\012\050\014\037\020\042\021" +
    "\035\026\041\033\031\037\033\041\034\060\046\063\032" +
    "\064\052\065\004\066\043\001\002\000\046\002\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\017\uffe6\023\uffe6\024\uffe6\027\uffe6\030\uffe6\035" +
    "\uffe6\036\125\037\uffe6\065\uffe6\001\002\000\042\004\067" +
    "\022\105\031\101\032\070\033\072\034\071\040\335\044" +
    "\102\045\074\046\073\047\103\050\100\053\076\054\077" +
    "\056\104\057\075\001\002\000\016\037\057\041\034\051" +
    "\215\052\216\061\214\066\053\001\002\000\014\002\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\027\ufffc\001\002\000\042\004" +
    "\067\006\340\022\105\031\101\032\070\033\072\034\071" +
    "\044\102\045\074\046\073\047\103\050\100\053\076\054" +
    "\077\056\104\057\075\001\002\000\032\005\017\006\014" +
    "\011\ufffb\013\022\014\012\015\013\017\010\023\025\024" +
    "\011\030\005\037\007\065\004\001\002\000\004\011\342" +
    "\001\002\000\044\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\023\ufff2" +
    "\024\ufff2\027\ufff2\030\ufff2\035\ufff2\037\ufff2\065\ufff2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\020\003\014\004\023\005\017\006\005\007" +
    "\022\011\015\017\020\001\001\000\002\001\001\000\016" +
    "\011\043\012\336\017\050\020\035\021\046\031\044\001" +
    "\001\000\002\001\001\000\016\011\043\012\333\017\050" +
    "\020\035\021\046\031\044\001\001\000\004\013\325\001" +
    "\001\000\020\010\324\011\043\012\065\017\050\020\035" +
    "\021\046\031\044\001\001\000\006\014\311\015\312\001" +
    "\001\000\016\011\043\012\265\017\050\020\035\021\046" +
    "\031\044\001\001\000\022\002\263\003\026\004\023\005" +
    "\017\006\005\007\022\011\015\017\020\001\001\000\002" +
    "\001\001\000\006\021\057\022\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\057\022\053\001\001" +
    "\000\004\013\235\001\001\000\002\001\001\000\014\005" +
    "\224\006\225\007\022\011\015\017\020\001\001\000\022" +
    "\002\025\003\026\004\023\005\017\006\005\007\022\011" +
    "\015\017\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\043\012\037\017\050\020\035\021\046\031" +
    "\044\001\001\000\016\011\043\012\223\017\050\020\035" +
    "\021\046\031\044\001\001\000\002\001\001\000\016\011" +
    "\043\012\210\017\050\020\035\021\046\031\044\001\001" +
    "\000\022\011\043\012\167\017\050\020\035\021\046\024" +
    "\171\026\164\031\044\001\001\000\016\011\043\012\163" +
    "\017\050\020\035\021\046\031\044\001\001\000\002\001" +
    "\001\000\004\016\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\057\022\133\001\001\000\002\001\001\000\016\011\043" +
    "\012\132\017\050\020\035\021\046\031\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\057\022\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\043\012\130\017\050\020\035\021\046" +
    "\031\044\001\001\000\002\001\001\000\020\010\063\011" +
    "\043\012\065\017\050\020\035\021\046\031\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\057\022" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\043\012\123\017" +
    "\050\020\035\021\046\031\044\001\001\000\016\011\043" +
    "\012\122\017\050\020\035\021\046\031\044\001\001\000" +
    "\016\011\043\012\121\017\050\020\035\021\046\031\044" +
    "\001\001\000\016\011\043\012\120\017\050\020\035\021" +
    "\046\031\044\001\001\000\016\011\043\012\117\017\050" +
    "\020\035\021\046\031\044\001\001\000\016\011\043\012" +
    "\116\017\050\020\035\021\046\031\044\001\001\000\016" +
    "\011\043\012\115\017\050\020\035\021\046\031\044\001" +
    "\001\000\016\011\043\012\114\017\050\020\035\021\046" +
    "\031\044\001\001\000\016\011\043\012\113\017\050\020" +
    "\035\021\046\031\044\001\001\000\016\011\043\012\112" +
    "\017\050\020\035\021\046\031\044\001\001\000\016\011" +
    "\043\012\111\017\050\020\035\021\046\031\044\001\001" +
    "\000\016\011\043\012\110\017\050\020\035\021\046\031" +
    "\044\001\001\000\016\011\043\012\107\017\050\020\035" +
    "\021\046\031\044\001\001\000\016\011\043\012\106\017" +
    "\050\020\035\021\046\031\044\001\001\000\016\011\043" +
    "\012\105\017\050\020\035\021\046\031\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\043\012\126" +
    "\017\050\020\035\021\046\031\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\043\012\142\017\050\020\035\021\046\031\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\057\022\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\146\023" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\156\003\026\004" +
    "\023\005\017\006\005\007\022\011\015\017\020\001\001" +
    "\000\002\001\001\000\022\002\154\003\026\004\023\005" +
    "\017\006\005\007\022\011\015\017\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\204\027\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\043\012\173\017\050\020\035\021\046\031\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\043\012\176\017\050\020" +
    "\035\021\046\031\044\001\001\000\002\001\001\000\016" +
    "\011\043\012\200\017\050\020\035\021\046\031\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\043" +
    "\012\167\017\050\020\035\021\046\026\207\031\044\001" +
    "\001\000\002\001\001\000\004\027\205\001\001\000\020" +
    "\011\043\012\167\017\050\020\035\021\046\026\206\031" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\057\022\212\001\001\000\002\001" +
    "\001\000\016\011\043\012\221\017\050\020\035\021\046" +
    "\031\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\057\022\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\234\011\043\012\065\017" +
    "\050\020\035\021\046\031\044\001\001\000\006\011\232" +
    "\017\233\001\001\000\006\021\057\022\133\001\001\000" +
    "\006\021\057\022\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\043\012\240\017" +
    "\050\020\035\021\046\031\044\001\001\000\002\001\001" +
    "\000\016\011\043\012\242\017\050\020\035\021\046\031" +
    "\044\001\001\000\002\001\001\000\016\011\043\012\247" +
    "\017\050\020\035\021\046\031\044\001\001\000\022\002" +
    "\245\003\026\004\023\005\017\006\005\007\022\011\015" +
    "\017\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\251\003\026\004\023\005\017" +
    "\006\005\007\022\011\015\017\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\255\011\043\012\065" +
    "\017\050\020\035\021\046\031\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\257\003\026\004\023" +
    "\005\017\006\005\007\022\011\015\017\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\267\003\026\004\023\005\017\006\005" +
    "\007\022\011\015\017\020\001\001\000\004\030\272\001" +
    "\001\000\016\011\043\012\306\017\050\020\035\021\046" +
    "\031\044\001\001\000\022\002\304\003\026\004\023\005" +
    "\017\006\005\007\022\011\015\017\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\302\003\026\004" +
    "\023\005\017\006\005\007\022\011\015\017\020\001\001" +
    "\000\016\011\043\012\277\017\050\020\035\021\046\031" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\301\003\026\004\023\005\017\006\005\007\022\011" +
    "\015\017\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\310\003\026\004\023\005\017" +
    "\006\005\007\022\011\015\017\020\001\001\000\002\001" +
    "\001\000\004\016\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\330\001\001" +
    "\000\002\001\001\000\020\010\332\011\043\012\065\017" +
    "\050\020\035\021\046\031\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\057\022\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\340\003\026" +
    "\004\023\005\017\006\005\007\022\011\015\017\020\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!
	private int auxCounter = 0;
	private No raiz = new No(null);
	private No aux = null;
	private static String out = "";
    public static void main (String args[]) throws Exception{
    		System.out.println("Insira o nome do arquivo de entrada: ");
		java.util.Scanner entrada = new java.util.Scanner(System.in);
		String nome = entrada.nextLine();
		Parser fdp = new Parser(new Yylex(new java.io.FileReader(nome)));
		No nRaiz = (No) fdp.parse().value;
		System.out.println(out);
		FileWriter arvParser, codInter;
		arvParser = null;
		codInter = null;
		try {
			arvParser = new FileWriter(new File("ArvoreParser.txt"));
			arvParser.write(nRaiz.toString());
			codInter = new FileWriter(new File("CodigoInter.txt"));
			codInter.write(nRaiz.getExpressao());
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (arvParser != null)
				arvParser.close();
			if (codInter != null)
				codInter.close();
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // chunk ::= chunk2 
            {
              No RESULT =null;
		int ch2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ch2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "chunk");
									No.novoFilho(aux, ch2);
									aux.setValor(ch2.getValor());
									aux.setExpressao(ch2.getExpressao());
									RESULT =  aux;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No start_val = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= chunk2 laststat 
            {
              No RESULT =null;
		int ch2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No ch2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lststtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lststtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No lststt = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "chunk");
									No.novoFilho(aux, ch2);
									No.novoFilho(aux, lststt);
									aux.setExpressao(ch2.getExpressao()+lststt.getExpressao()+ lststt.getValor());
									RESULT =  aux;
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= chunk2 laststat PVIRG 
            {
              No RESULT =null;
		int ch2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No ch2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No lst = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "chunk");
									No.novoFilho(aux, ch2);
									No.novoFilho(aux, lst);
									No.novoFilho(aux, ";");
									aux.setExpressao(ch2.getExpressao()+lst.getExpressao()+ lst.getValor());
									RESULT =  aux;
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chunk ::= laststat 
            {
              No RESULT =null;
		int lststtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lststtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No lststt = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "chunk");
									No.novoFilho(aux, lststt);
									aux.setExpressao(lststt.getExpressao()+lststt.getValor());
									RESULT =  aux;
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // chunk ::= laststat PVIRG 
            {
              No RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No lst = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "chunk");
									No.novoFilho(aux, lst);
									No.novoFilho(aux, ";");
									aux.setExpressao(lst.getExpressao()+lst.getValor());
									RESULT =  aux;
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // chunk ::= 
            {
              No RESULT =null;
		 aux = new No(null, "chunk");
					RESULT =  aux;
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // chunk2 ::= chunk2 stat 
            {
              No RESULT =null;
		int ch2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No ch2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No stt = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		aux = new No(null, "chunk2");
					No.novoFilho(aux, ch2);
					No.novoFilho(aux, stt);
					aux.setExpressao(ch2.getExpressao() + stt.getExpressao()+ stt.getValor());
					RESULT =  aux;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // chunk2 ::= chunk2 stat PVIRG 
            {
              No RESULT =null;
		int ch2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No ch2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No stt = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "chunk2");
					No.novoFilho(aux, ch2);
					No.novoFilho(aux, stt);
					No.novoFilho(aux, ";");
					aux.setExpressao(ch2.getExpressao() + stt.getExpressao()+ stt.getValor());
					RESULT =  aux;
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // chunk2 ::= stat 
            {
              No RESULT =null;
		int sttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No stt = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		aux = new No(null, "chunk2");
					No.novoFilho(aux, stt);
					aux.setExpressao(stt.getExpressao()+stt.getValor());
					RESULT =  aux;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // chunk2 ::= stat PVIRG 
            {
              No RESULT =null;
		int sttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No stt = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "chunk2");
					No.novoFilho(aux, stt);
					No.novoFilho(aux, ";");
					aux.setExpressao(stt.getExpressao()+stt.getValor());
					RESULT =  aux;
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= chunk 
            {
              No RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ch = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "block");
					No.novoFilho(aux, ch);
					aux.setExpressao(ch.getExpressao());
					RESULT =  aux;
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= varlist IGUAL explist 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No el = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  aux = new No(null, "stat");
														No.novoFilho(aux, v);
														No.novoFilho(aux, "=");
														No.novoFilho(aux, el);
														aux.setExpressao(v.getExpressao()+el.getExpressao()+v.getValor()+" = "+ el.getValor()+"\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= functioncall 
            {
              No RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  aux = new No(null, "stat");
														No.novoFilho(aux, fc);
														aux.setExpressao(fc.getExpressao()+fc.getValor()+"\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= DO block END 
            {
              No RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  aux = new No(null, "stat");
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao("do\n"+bl.getExpressao()+"end\n");
														RESULT =  aux; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= WHILE exp DO block END 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No b = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "while");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, b);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+"::label"+auxCounter+"::\n"+
																			"if not("+e.getValor()+") then\ngoto fim\nend"+
																			auxCounter+"\n"+b.getExpressao()+"goto label"+
																			auxCounter+"\n::fim"+auxCounter+"::\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= REPEAT block UNTIL exp 
            {
              No RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No b = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "repeat");
														No.novoFilho(aux, b);
														No.novoFilho(aux, "until");
														No.novoFilho(aux, e);
														aux.setExpressao("::label"+auxCounter+"::\n"+b.getExpressao()+e.getExpressao()+
																			"if not("+e.getValor()+") then \ngoto label"+
																			auxCounter+"\nend\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR IDENT IGUAL exp VIRG exp DO block END 
            {
              No RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No e2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "for");
														No.novoFilho(aux, "id");
														No.novoFilho(aux, "=");
														No.novoFilho(aux, e1);
														No.novoFilho(aux, ",");
														No.novoFilho(aux, e2);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao("aux"+auxCounter+"="+e1.getValor()+"\n"+"aux"+auxCounter+1+"="+e2.getValor()+"\n"+
																"aux"+auxCounter+2+"= 1 \n"+"aux"+auxCounter+3+"= aux"+auxCounter+
																" and aux"+auxCounter+2+"\n aux"+auxCounter+4+"= aux"+auxCounter+2+" and aux"+auxCounter+
																3+"\n if not("+auxCounter+4+") then goto fim"+auxCounter+"\n aux"+auxCounter+" = "+
																auxCounter+" - aux"+auxCounter+2+"\n ::label"+auxCounter+"::\n aux"+auxCounter+
																"= aux"+auxCounter+" + aux"+auxCounter+2+"\n aux"+auxCounter+5+" = aux"+auxCounter+2+
																" <= 0 \n aux"+auxCounter+6+"= aux"+auxCounter+" > aux"+auxCounter+1+"\n aux"+
																auxCounter+7+"= aux"+auxCounter+5+" and aux"+auxCounter+6+"\n aux"+auxCounter+8+
																"= aux"+auxCounter+2+" > 0 \n aux"+auxCounter+9+"= aux"+auxCounter+" < aux"+
																auxCounter+1+"\n aux"+auxCounter+10+"= aux"+auxCounter+9+" and aux"+auxCounter+8+
																"\n aux"+auxCounter+11+"= aux"+auxCounter+7+" or aux"+auxCounter+10+"\n if aux"+
																auxCounter+11+" then goto fim"+auxCounter+"\n local "+i+"= aux"+auxCounter+
																"\n"+bl.getExpressao()+"\n goto label"+auxCounter+"\n::fim"+auxCounter+"::\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FOR IDENT IGUAL exp VIRG exp VIRG exp DO block END 
            {
              No RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		No e2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No e3 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  aux = new No(null, "stat");
														No.novoFilho(aux, "for");
														No.novoFilho(aux, "id");
														No.novoFilho(aux, "=");
														No.novoFilho(aux, e1);
														No.novoFilho(aux, ",");
														No.novoFilho(aux, e2);
														No.novoFilho(aux, ",");
														No.novoFilho(aux, e3);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao("aux"+auxCounter+"="+e1.getValor()+"\n"+"aux"+auxCounter+1+"="+e2.getValor()+"\n"+
																"aux"+auxCounter+2+"="+e3.getValor()+"\n"+"aux"+auxCounter+3+"= aux"+auxCounter+
																" and aux"+auxCounter+2+"\n aux"+auxCounter+4+"= aux"+auxCounter+2+" and aux"+auxCounter+
																3+"\n if not("+auxCounter+4+") then goto fim"+auxCounter+"\n aux"+auxCounter+5+" = "+
																auxCounter+" - aux"+auxCounter+2+"\n ::label"+auxCounter+"::\n aux"+auxCounter+
																"= aux"+auxCounter+" + aux"+auxCounter+2+"\n aux"+auxCounter+5+" = aux"+auxCounter+2+
																" <= 0 \n aux"+auxCounter+6+"= aux"+auxCounter+" > aux"+auxCounter+1+"\n aux"+
																auxCounter+7+"= aux"+auxCounter+5+" and aux"+auxCounter+6+"\n aux"+auxCounter+8+
																"= aux"+auxCounter+2+" > 0 \n aux"+auxCounter+9+"= aux"+auxCounter+" < aux"+
																auxCounter+1+"\n aux"+auxCounter+10+"= aux"+auxCounter+9+" and aux"+auxCounter+8+
																"\n aux"+auxCounter+11+"= aux"+auxCounter+7+" or aux"+auxCounter+10+"\n if aux"+
																auxCounter+11+" then goto fim"+auxCounter+"\n local "+i+"= aux"+auxCounter+
																"\n"+bl.getExpressao()+"\n goto label"+auxCounter+"\n::fim"+auxCounter+"::\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= FOR namelist IN explist DO block END 
            {
              No RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		No nl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No el = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "for");
														No.novoFilho(aux, nl);
														No.novoFilho(aux, "in");
														No.novoFilho(aux, el);
														No.novoFilho(aux, "do");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= IF exp THEN block ifeio END 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No i = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, i);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+i.getExpressao()+"if "+e.getValor()+
																			" then\n"+bl.getExpressao()+i.getValor()+"end\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stat ::= IF exp THEN block ifeio ELSE block END 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No bl1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No i = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl1);
														No.novoFilho(aux, i);
														No.novoFilho(aux, "else");
														No.novoFilho(aux, bl2);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+i.getExpressao()+"if "+e.getValor()+
																			" then\n"+bl2.getExpressao()+i.getValor()+"else \n"+
																			bl2.getExpressao()+"end\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stat ::= IF exp THEN block END 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+"if "+e.getValor()+" then\n"+bl.getExpressao()+"end\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stat ::= IF exp THEN block ELSE block END 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No bl1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "if");
														No.novoFilho(aux, e);
														No.novoFilho(aux, "then");
														No.novoFilho(aux, bl1);
														No.novoFilho(aux, "else");
														No.novoFilho(aux, bl2);
														No.novoFilho(aux, "end");
														aux.setExpressao(e.getExpressao()+"if "+e.getValor()+" then\n"+bl1.getExpressao()+
																			"else\n"+bl2.getExpressao()+"end\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stat ::= FUNCTION funcname funcbody 
            {
              No RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fn = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fb = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "function");
														No.novoFilho(aux, fn);
														No.novoFilho(aux, fb);
														aux.setExpressao("function "+fn.getValor()+fb.getValor());
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stat ::= LOCAL FUNCTION IDENT funcbody 
            {
              No RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fb = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "local");
														No.novoFilho(aux, "function");
														No.novoFilho(aux, "id");
														No.novoFilho(aux, fb);
														aux.setExpressao("function"+id+fb.getValor());
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stat ::= LOCAL namelist 
            {
              No RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No nl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "local");
														No.novoFilho(aux, nl);
														aux.setExpressao(nl.getExpressao()+"local "+nl.getValor()+"\n");
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stat ::= LOCAL namelist IGUAL explist 
            {
              No RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No nl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No el = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "stat");
														No.novoFilho(aux, "local");
														No.novoFilho(aux, nl);
														No.novoFilho(aux, "=");
														No.novoFilho(aux, el);
														aux.setExpressao(nl.getExpressao()+el.getExpressao()+"local "+nl.getValor()+" = "+el.getValor());
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifeio ::= ifeio ELSEIF exp THEN block 
            {
              No RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No i = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "ifeio");
												No.novoFilho(aux, i);
												No.novoFilho(aux, "elseif");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "then");
												No.novoFilho(aux, bl);
												aux.setExpressao(i.getExpressao()+ e.getExpressao());
												aux.setValor(i.getValor()+"elseif "+e.getValor()+" then \n"+bl.getExpressao());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifeio",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ifeio ::= ELSEIF exp THEN block 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "ifeio");
												No.novoFilho(aux, "elseif");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "then");
												No.novoFilho(aux, bl);
												aux.setExpressao(e.getExpressao());
												aux.setValor("elseif "+e.getValor()+" then \n"+bl.getExpressao());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifeio",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // laststat ::= RETURN 
            {
              No RESULT =null;
		 aux = new No(null, "laststat");
											No.novoFilho(aux, "return");
											aux.setExpressao("return\n");
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // laststat ::= RETURN explist 
            {
              No RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No el = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "laststat");
											No.novoFilho(aux, "return");
											No.novoFilho(aux, el);
											aux.setExpressao(el.getExpressao()+"return "+el.getValor()+"\n");
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // laststat ::= BREAK 
            {
              No RESULT =null;
		 aux = new No(null, "laststat");
										No.novoFilho(aux, "break");
										aux.setExpressao("break\n");
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcname ::= funcname2 IDENT 
            {
              No RESULT =null;
		int fn2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fn2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fn2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "funcname");
											No.novoFilho(aux, fn2);
											No.novoFilho(aux, "id");
											aux.setValor(fn2.getValor()+id);
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcname ::= funcname2 IDENT PONTOS IDENT 
            {
              No RESULT =null;
		int fn2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fn2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No fn2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "funcname");
											No.novoFilho(aux, fn2);
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ":");
											No.novoFilho(aux, "id");
											aux.setValor(fn2.getValor()+id+":"+id2);
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcname ::= IDENT 
            {
              No RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "funcname");
											No.novoFilho(aux, "id");
											aux.setValor(id);
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcname ::= IDENT PONTOS IDENT 
            {
              No RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "funcname");
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ":");
											No.novoFilho(aux, "id");
											aux.setValor(id+":"+id2);
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcname2 ::= funcname2 IDENT PONTO 
            {
              No RESULT =null;
		int fn2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fn2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No fn2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "funcname2");
											No.novoFilho(aux, fn2);
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ".");
											aux.setValor(fn2.getValor()+id+".");
											RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcname2 ::= IDENT PONTO 
            {
              No RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "funcname2");
											No.novoFilho(aux, "id");
											No.novoFilho(aux, ".");
											aux.setValor(id+".");
											RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcbody ::= PARENE parlist PAREND block END 
            {
              No RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No pl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "funcbody");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, pl);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, bl);
												No.novoFilho(aux, "end");
												aux.setValor("("+pl.getValor()+")\n"+bl.getExpressao()+"end\n");
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcbody ::= PARENE PAREND block END 
            {
              No RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No bl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	aux = new No(null, "funcbody");
										No.novoFilho(aux, "(");
										No.novoFilho(aux, ")");
										No.novoFilho(aux, bl);
										No.novoFilho(aux, "end");
										aux.setValor("()\n"+bl.getExpressao()+"end\n");
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parlist ::= namelist VIRG TPONTOS 
            {
              No RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No nl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			aux = new No(null, "parlist");
											No.novoFilho(aux, nl);
											No.novoFilho(aux, ",");
											No.novoFilho(aux, "...");
											aux.setValor(nl.getValor()+", ...");
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parlist ::= namelist 
            {
              No RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No nl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "parlist");
											No.novoFilho(aux, nl);
											aux.setValor(nl.getValor());
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parlist ::= TPONTOS 
            {
              No RESULT =null;
		 	aux = new No(null, "parlist");
											No.novoFilho(aux, "...");
											aux.setValor("...");
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= IDENT 
            {
              No RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "var");
											No.novoFilho(aux, "id:"+n);
											aux.setValor(n);
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= var COLCHEE exp COLCHED 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "var");
												No.novoFilho(aux, v);
												No.novoFilho(aux, "[");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "]");
												aux.setExpressao(v.getExpressao()+e.getExpressao());
												aux.setValor(v.getValor()+"["+e.getValor()+"]");
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var ::= var PONTO IDENT 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "var");
												No.novoFilho(aux, v);
												No.novoFilho(aux, ".");
												No.novoFilho(aux, "id");
												aux.setExpressao(v.getExpressao());
												aux.setValor(v.getValor()+"."+id);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var ::= functioncall COLCHEE exp COLCHED 
            {
              No RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No fc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "var");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, "[");
												No.novoFilho(aux, e);
												No.novoFilho(aux, "]");
												aux.setExpressao(fc.getExpressao()+e.getExpressao());
												aux.setValor(fc.getValor()+"["+e.getValor()+"]");
												aux.setEnds(fc.getEnds()+e.getEnds());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var ::= functioncall PONTO IDENT 
            {
              No RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No fc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "var");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, ".");
												No.novoFilho(aux, "id");
												aux.setExpressao(fc.getExpressao());
												aux.setValor(fc.getValor()+"."+id);
												aux.setEnds(fc.getEnds()+1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var ::= PARENE exp PAREND COLCHEE exp COLCHED 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No e2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "var");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, "[");
												No.novoFilho(aux, e2);
												No.novoFilho(aux, "]");
												aux.setExpressao(e1.getExpressao()+e2.getExpressao());
												aux.setValor("("+e1.getValor()+")["+e2.getValor()+"]");
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var ::= PARENE exp PAREND PONTO IDENT 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "var");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, ".");
												No.novoFilho(aux, "id");
												aux.setExpressao(e1.getExpressao());
												aux.setValor("("+e1.getValor()+")."+id);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // varlist ::= varlist VIRG var 
            {
              No RESULT =null;
		int vl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No vl2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "varlist");
												No.novoFilho(aux, vl2);
												No.novoFilho(aux, v);
												aux.setExpressao(vl2.getExpressao()+v.getExpressao());
												aux.setValor(vl2.getValor()+", "+v.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varlist ::= var 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "varlist");
										No.novoFilho(aux, v);
										aux.setExpressao(v.getExpressao());
										aux.setValor(v.getValor());
										aux.setEnds(v.getEnds());
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // namelist ::= namelist VIRG IDENT 
            {
              No RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No nl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "namelist");
										No.novoFilho(aux, nl);
										No.novoFilho(aux, ",");
										No.novoFilho(aux, "id");
										aux.setValor(nl.getValor()+", "+id);
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // namelist ::= IDENT 
            {
              No RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "namelist");
										No.novoFilho(aux, "id");
										aux.setValor(id);
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // explist ::= explist VIRG exp 
            {
              No RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No el = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "explist");
										No.novoFilho(aux, el);										
										No.novoFilho(aux, ",");
										No.novoFilho(aux, e);
										aux.setExpressao(el.getExpressao()+e.getExpressao());
										aux.setValor(el.getValor()+", "+e.getValor());
										aux.setEnds(e.getEnds()+el.getEnds());
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // explist ::= exp 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "explist");
										No.novoFilho(aux, e);
										aux.setExpressao(e.getExpressao());
										aux.setValor(e.getValor());
										aux.setEnds(e.getEnds());
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function ::= FUNCTION funcbody 
            {
              No RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fb = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "<function>");
										No.novoFilho(aux, fb);
										aux.setValor("function "+fb.getValor());
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= factor 
            {
              No RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, f);
												aux.setValor(f.getValor());
												aux.setEnds(1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= var 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, v);
												aux.setExpressao(v.getExpressao());
												aux.setValor(v.getValor());
												aux.setEnds(1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= PARENE exp PAREND 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e);
												No.novoFilho(aux, ")");
												aux.setEnds(e.getEnds());
												aux.setValor("("+e.getValor()+")");
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= functioncall 
            {
              No RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, fc);
												aux.setExpressao(fc.getExpressao());
												aux.setValor(fc.getValor());
												aux.setEnds(1+fc.getEnds());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= function 
            {
              No RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fun = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, fun);
												aux.setEnds(1);
												aux.setExpressao("aux"+auxCounter+" = "+fun.getValor()+"\n");
												aux.setValor("aux"+auxCounter);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= tableconstructor 
            {
              No RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No tc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, tc);
												aux.setEnds(1);
												aux.setExpressao(tc.getExpressao());
												aux.setValor(tc.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp OR exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "or");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" or ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" or ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp MAIS exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "+");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" + ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" + ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp MENOS exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "-");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" - ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" - ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp VEZES exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "*");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" * ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" * ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp DIVIDE exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "/");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" / ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" / ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp EXPO exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "^");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" ^ ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" ^ ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= exp RESTO exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "%");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" % ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" % ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= exp DPONTOS exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "..");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" .. ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" .. ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= exp MENOR exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "<");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" < ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" < ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= exp MENORI exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "<=");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" <= ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" <= ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= exp MAIOR exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ">");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" > ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" > ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= exp MAIORI exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, ">=");
												No.novoFilho(aux, f);
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" >= ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" >= ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= exp IGUALI exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "==");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" == ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" == ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp ::= exp TILI exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "~=");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" ~= ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" ~= ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= exp AND exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, e1);
												No.novoFilho(aux, "and");
												No.novoFilho(aux, f);
												
												if(e1.getEnds()>1){
													aux.setExpressao(e1.getExpressao()+"aux"+auxCounter+" = "+e1.getValor()+"\n");
													aux.setValor("aux"+auxCounter+" and ");
													auxCounter++;
												}else{
													aux.setValor(e1.getValor()+" and ");												
												}
												if(f.getEnds()>1){
													aux.setExpressao(aux.getExpressao()+f.getExpressao()+"aux"+auxCounter+" = "+f.getValor()+"\n");
													aux.setValor(aux.getValor()+"aux"+auxCounter);
													auxCounter++;
												}else{
													aux.setValor(aux.getValor()+f.getValor());												
												}
												aux.setEnds(2);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= MENOS exp 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, "-");
												No.novoFilho(aux, e);
												aux.setExpressao(e.getExpressao());
												aux.setValor("-"+e.getValor());
												RESULT =  aux; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= NOT exp 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, "not");
												No.novoFilho(aux, e);
												aux.setExpressao(e.getExpressao());
												aux.setValor("not "+e.getValor());
												RESULT =  aux; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= TRALHA exp 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "exp");
												No.novoFilho(aux, "#");
												No.novoFilho(aux, e);
												aux.setExpressao(e.getExpressao());
												aux.setValor("#"+e.getValor());
												RESULT =  aux; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // functioncall ::= var args 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ar = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "functioncall");
												No.novoFilho(aux, v);
												No.novoFilho(aux, ar);
												aux.setExpressao(v.getExpressao()+ar.getExpressao());
												aux.setValor(v.getValor()+ar.getValor());
												aux.setEnds(v.getEnds()+ar.getEnds());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // functioncall ::= var PONTOS IDENT args 
            {
              No RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No v = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ar = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "functioncall");
												No.novoFilho(aux, v);
												No.novoFilho(aux, ":");
												No.novoFilho(aux, "id");
												No.novoFilho(aux, ar);
												aux.setEnds(v.getEnds()+ar.getEnds()+1);
												aux.setExpressao(v.getExpressao()+ar.getExpressao());
												aux.setValor(v.getValor()+":"+id+ar.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // functioncall ::= functioncall args 
            {
              No RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ar = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "functioncall");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, ar);
												aux.setEnds(fc.getEnds()+ar.getEnds());
												aux.setExpressao(fc.getExpressao()+ar.getExpressao());
												aux.setValor(fc.getValor()+ar.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // functioncall ::= functioncall PONTOS IDENT args 
            {
              No RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No fc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ar = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "functioncall");
												No.novoFilho(aux, fc);
												No.novoFilho(aux, ":");
												No.novoFilho(aux, "id");
												No.novoFilho(aux, ar);
												aux.setEnds(fc.getEnds()+ar.getEnds()+1);
												aux.setExpressao(fc.getExpressao()+ar.getExpressao());
												aux.setValor(fc.getValor()+":"+id+ar.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // functioncall ::= PARENE exp PAREND args 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ar = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "functioncall");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, ar);
												aux.setEnds(e.getEnds()+ar.getEnds());
												aux.setExpressao(e.getExpressao()+ar.getExpressao());
												aux.setValor("("+e.getValor()+")"+ar.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // functioncall ::= PARENE exp PAREND PONTOS IDENT args 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ar = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "functioncall");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, e);
												No.novoFilho(aux, ")");
												No.novoFilho(aux, ":");
												No.novoFilho(aux, "id");
												No.novoFilho(aux, ar);
												aux.setEnds(e.getEnds()+ar.getEnds()+1);
												aux.setExpressao(e.getExpressao()+ar.getExpressao());
												aux.setValor("("+e.getValor()+"):"+id+ar.getValor());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // args ::= PARENE explist PAREND 
            {
              No RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No el = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			aux = new No(null, "args");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, el);
												No.novoFilho(aux, ")");
												aux.setExpressao(el.getExpressao());
												aux.setValor("("+el.getValor()+")");
												aux.setEnds(el.getEnds());
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // args ::= PARENE PAREND 
            {
              No RESULT =null;
		 	aux = new No(null, "args");
												No.novoFilho(aux, "(");
												No.novoFilho(aux, ")");
												aux.setValor("()");
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // args ::= tableconstructor 
            {
              No RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No tc = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "args");
												No.novoFilho(aux, tc);
												aux.setExpressao(tc.getExpressao());
												aux.setValor(tc.getValor());
												aux.setEnds(1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // args ::= STRING 
            {
              No RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "args");
												No.novoFilho(aux, "string");
												aux.setValor(s);
												aux.setEnds(1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tableconstructor ::= CHAVEE fieldlist CHAVED 
            {
              No RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fl = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			aux = new No(null, "tableconstructor");
													No.novoFilho(aux,"{");
													No.novoFilho(aux, fl);
													No.novoFilho(aux,"}");
													aux.setExpressao(fl.getExpressao());
													aux.setValor("{"+fl.getValor()+"}");
													RESULT =  aux;
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tableconstructor ::= CHAVEE CHAVED 
            {
              No RESULT =null;
		 	aux = new No(null, "tableconstructor");
								No.novoFilho(aux,"{");
								No.novoFilho(aux,"}");
								aux.setValor("[]");
								RESULT =  aux;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fieldlist ::= field fieldlist2 
            {
              No RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fl2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											No.novoFilho(aux, fl2);
											aux.setExpressao(f.getExpressao()+fl2.getExpressao());
											aux.setValor(f.getValor()+fl2.getValor());
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fieldlist ::= field fieldlist2 fieldsep 
            {
              No RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fl2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fs = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											No.novoFilho(aux, fl2);
											No.novoFilho(aux, fs);
											aux.setExpressao(f.getExpressao()+fl2.getExpressao());
											aux.setValor(f.getValor()+fl2.getValor());
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fieldlist ::= field 
            {
              No RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											aux.setExpressao(f.getExpressao());
											aux.setValor(f.getValor());
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // fieldlist ::= field fieldsep 
            {
              No RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No fs = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "fieldlist");											
											No.novoFilho(aux, f);
											No.novoFilho(aux, fs);
											aux.setExpressao(f.getExpressao());
											aux.setValor(f.getValor());
											RESULT =  aux;
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // fieldlist2 ::= fieldlist2 fieldsep field 
            {
              No RESULT =null;
		int fl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No fl2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fs = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "fieldlist2");
														No.novoFilho(aux, fl2);
														No.novoFilho(aux, fs);
														No.novoFilho(aux, f);
														aux.setExpressao(fl2.getExpressao()+f.getExpressao());
														aux.setValor(fl2.getValor()+fs.getValor()+f.getValor());
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // fieldlist2 ::= fieldsep field 
            {
              No RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No fs = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No f = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	aux = new No(null, "fieldlist2");
														No.novoFilho(aux, fs);
														No.novoFilho(aux, f);
														aux.setExpressao(f.getExpressao());
														aux.setValor(fs.getValor()+f.getValor());
														RESULT =  aux;
														
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // field ::= COLCHEE exp COLCHED IGUAL exp 
            {
              No RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No e1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "field");
													No.novoFilho(aux,"[");
													No.novoFilho(aux, e1);
													No.novoFilho(aux,"]");
													No.novoFilho(aux,"=");
													No.novoFilho(aux, e2);
													aux.setExpressao(e1.getExpressao()+e2.getExpressao());
													aux.setValor("["+e1.getValor()+"] = "+e2.getValor());
													RESULT =  aux;
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // field ::= IDENT IGUAL exp 
            {
              No RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "field");
										No.novoFilho(aux, "id");
										No.novoFilho(aux, "=");
										No.novoFilho(aux, e);
										aux.setExpressao(e.getExpressao());
										aux.setValor(id+" = "+e.getValor());
										RESULT =  aux;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // field ::= exp 
            {
              No RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No e = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			aux = new No(null, "field");
						No.novoFilho(aux, e);
						aux.setExpressao(e.getExpressao());
						aux.setValor(e.getValor());
						RESULT =  aux;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // fieldsep ::= VIRG 
            {
              No RESULT =null;
		 	aux = new No(null, "fieldsep");
						No.novoFilho(aux,",");
						aux.setValor(",");
						RESULT =  aux;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // fieldsep ::= PVIRG 
            {
              No RESULT =null;
		 	aux = new No(null, "fieldsep");
						No.novoFilho(aux,";");
						aux.setValor(";");
						RESULT =  aux;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= NIL 
            {
              No RESULT =null;
		 aux = new No(null, "factor");
												No.novoFilho(aux, "nil");
												aux.setValor("nil");
												aux.setEnds(1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= FALSE 
            {
              No RESULT =null;
			aux = new No(null, "factor");
												No.novoFilho(aux, "false");
												aux.setValor("false");
												aux.setEnds(1);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= TRUE 
            {
              No RESULT =null;
		 aux = new No(null, "factor");
												No.novoFilho(aux, "true");
												aux.setEnds(1);
												aux.setValor("true");
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= REAL 
            {
              No RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "factor");
												No.novoFilho(aux, "real");
												aux.setEnds(1);
												aux.setValor(""+n);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= INT 
            {
              No RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "factor");
												No.novoFilho(aux, "int");
												aux.setEnds(1);
												aux.setValor(""+n);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= STRING 
            {
              No RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aux = new No(null, "factor");
												No.novoFilho(aux, "str");
												aux.setEnds(1);
												aux.setValor(n);
												RESULT =  aux;
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
