
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

// Connect this parser to a scanner!
    public static void main (String args[]) throws Exception{
		new Parser(new Yylex(new FileReader(new File("exemplo.lua")))).parse();
	}

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\003\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\004\000\002\004\005" +
    "\000\002\004\002\000\002\002\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\005\000\002\005\007\000\002" +
    "\005\006\000\002\005\010\000\002\005\012\000\002\005" +
    "\013\000\002\005\015\000\002\005\011\000\002\005\005" +
    "\000\002\005\006\000\002\005\004\000\002\005\006\000" +
    "\002\035\007\000\002\035\002\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\017\004\000\002\017" +
    "\006\000\002\020\005\000\002\020\002\000\002\007\004" +
    "\000\002\010\005\000\002\010\002\000\002\022\003\000" +
    "\002\022\006\000\002\022\005\000\002\022\006\000\002" +
    "\022\005\000\002\022\010\000\002\022\007\000\002\015" +
    "\004\000\002\016\005\000\002\016\002\000\002\011\004" +
    "\000\002\012\005\000\002\012\002\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\014\003\000\002\014\005\000\002\014\004\000" +
    "\002\013\004\000\002\013\006\000\002\013\004\000\002" +
    "\013\006\000\002\013\006\000\002\013\010\000\002\027" +
    "\005\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\023\004\000\002\021\007\000\002\021\006\000" +
    "\002\030\005\000\002\030\003\000\002\030\003\000\002" +
    "\024\005\000\002\024\004\000\002\031\005\000\002\031" +
    "\004\000\002\032\005\000\002\032\002\000\002\033\007" +
    "\000\002\033\005\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\032\002\ufffb\005\ufffb\006\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\017\ufffb\023\ufffb\024\ufffb\030\ufffb\037\ufffb" +
    "\061\ufffb\001\002\000\004\002\306\001\002\000\042\002" +
    "\ufffe\005\025\006\023\007\ufffe\010\ufffe\011\ufffe\013\011" +
    "\014\020\015\017\017\015\023\006\024\021\027\ufffe\030" +
    "\007\037\013\061\010\001\002\000\032\005\ufffb\006\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb\024\ufffb\027" +
    "\ufffb\030\ufffb\037\ufffb\061\ufffb\001\002\000\036\012\062" +
    "\014\051\020\053\021\045\026\050\033\037\037\044\041" +
    "\036\055\043\060\057\061\010\062\042\063\065\066\055" +
    "\001\002\000\150\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\001\002\000\004\061\255\001\002\000\056\002" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\017\ufff8\023\ufff8\024\ufff8\027\ufff8\030" +
    "\ufff8\035\ufff8\037\030\041\036\051\113\052\114\061\ufff8" +
    "\064\111\066\031\001\002\000\036\012\062\014\051\020" +
    "\053\021\045\026\050\033\037\037\044\041\036\055\043" +
    "\060\057\061\010\062\042\063\065\066\055\001\002\000" +
    "\044\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\017\ufffd\023\ufffd\024\ufffd\027" +
    "\ufffd\030\ufffd\035\251\037\ufffd\061\ufffd\001\002\000\006" +
    "\014\244\061\132\001\002\000\004\043\241\001\002\000" +
    "\036\012\062\014\051\020\053\021\045\026\050\033\037" +
    "\037\044\041\036\055\043\060\057\061\010\062\042\063" +
    "\065\066\055\001\002\000\004\061\216\001\002\000\054" +
    "\002\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffd3\014\uffd3\020" +
    "\uffd3\021\uffd3\026\uffd3\027\uffe9\033\uffd3\035\uffe9\036\uffd3" +
    "\037\uffd3\041\uffd3\055\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\066\uffd3\001\002\000\016\002\001\007\001\010\001" +
    "\011\001\027\001\035\213\001\002\000\032\005\ufffb\006" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb" +
    "\024\ufffb\030\ufffb\037\ufffb\061\ufffb\001\002\000\022\036" +
    "\uffe0\037\030\041\036\043\uffe0\051\034\052\032\064\026" +
    "\066\031\001\002\000\016\002\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\027\uffe7\035\uffe7\001\002\000\036\012\062\014\051" +
    "\020\053\021\045\026\050\033\037\037\044\041\036\055" +
    "\043\060\057\061\010\062\042\063\065\066\055\001\002" +
    "\000\006\036\204\043\uffe2\001\002\000\042\012\uffd3\014" +
    "\uffd3\020\uffd3\021\uffd3\026\uffd3\033\uffd3\036\uffd3\037\uffd3" +
    "\040\177\041\uffd3\055\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\066\uffd3\001\002\000\146\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\001\002\000\004\061\173\001\002\000\146" +
    "\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002\000\004" +
    "\061\172\001\002\000\146\002\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\001\002\000\042\012\062\014\051\020\053\021" +
    "\045\026\050\033\037\037\044\041\036\042\047\055\043" +
    "\060\057\061\041\062\042\063\065\064\054\066\055\001" +
    "\002\000\036\012\uff9a\014\uff9a\020\uff9a\021\uff9a\026\uff9a" +
    "\033\uff9a\037\uff9a\041\uff9a\055\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\066\uff9a\001\002\000\010\035\uffaf\036\uffaf" +
    "\042\uffaf\001\002\000\064\004\uffdf\022\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf" +
    "\042\uffdf\043\163\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\056\uffdf\057\uffdf" +
    "\064\uffdf\066\uffdf\001\002\000\142\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\001\002\000\142\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\001\002\000\036" +
    "\012\062\014\051\020\053\021\045\026\050\033\037\037" +
    "\044\041\036\055\043\060\057\061\010\062\042\063\065" +
    "\066\055\001\002\000\036\012\uff99\014\uff99\020\uff99\021" +
    "\uff99\026\uff99\033\uff99\037\uff99\041\uff99\055\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\066\uff99\001\002\000\142\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\001\002\000\146\002\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\001\002\000\142\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\001\002\000\004\037\126\001\002\000\046\004\070\022" +
    "\107\031\102\032\071\033\073\034\072\035\uffac\036\uffac" +
    "\042\uffac\044\104\045\075\046\074\047\105\050\101\053" +
    "\077\054\100\056\106\057\076\001\002\000\142\002\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\001\002\000\036\012\062\014\051\020\053" +
    "\021\045\026\050\033\037\037\044\041\036\055\043\060" +
    "\057\061\010\062\042\063\065\066\055\001\002\000\142" +
    "\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\001\002\000\146\002\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\030" +
    "\040\uffc9\041\036\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\113\052\114\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\001\002\000\036\012\uff98\014\uff98" +
    "\020\uff98\021\uff98\026\uff98\033\uff98\037\uff98\041\uff98\055" +
    "\uff98\060\uff98\061\uff98\062\uff98\063\uff98\066\uff98\001\002" +
    "\000\036\012\062\014\051\020\053\021\045\026\050\033" +
    "\037\037\044\041\036\055\043\060\057\061\010\062\042" +
    "\063\065\066\055\001\002\000\142\002\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\001\002\000\142\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\001\002\000\004" +
    "\042\066\001\002\000\146\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\030\040\uffca\041" +
    "\036\042\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\034\052\032\053\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\001\002\000\142\002\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\001\002" +
    "\000\146\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002" +
    "\000\142\002\uffc5\004\070\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\107\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\102\032\071\033\073\034\072" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044" +
    "\104\045\075\046\074\047\105\050\101\053\077\054\100" +
    "\055\uffc5\056\106\057\076\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\036\012\uff9c" +
    "\014\uff9c\020\uff9c\021\uff9c\026\uff9c\033\uff9c\037\uff9c\041" +
    "\uff9c\055\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c" +
    "\001\002\000\036\012\uffa9\014\uffa9\020\uffa9\021\uffa9\026" +
    "\uffa9\033\uffa9\037\uffa9\041\uffa9\055\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\066\uffa9\001\002\000\036\012\uffa6\014" +
    "\uffa6\020\uffa6\021\uffa6\026\uffa6\033\uffa6\037\uffa6\041\uffa6" +
    "\055\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\066\uffa6\001" +
    "\002\000\036\012\uffa8\014\uffa8\020\uffa8\021\uffa8\026\uffa8" +
    "\033\uffa8\037\uffa8\041\uffa8\055\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\066\uffa8\001\002\000\036\012\uffa0\014\uffa0" +
    "\020\uffa0\021\uffa0\026\uffa0\033\uffa0\037\uffa0\041\uffa0\055" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\066\uffa0\001\002" +
    "\000\036\012\uffa2\014\uffa2\020\uffa2\021\uffa2\026\uffa2\033" +
    "\uffa2\037\uffa2\041\uffa2\055\uffa2\060\uffa2\061\uffa2\062\uffa2" +
    "\063\uffa2\066\uffa2\001\002\000\036\012\uffa4\014\uffa4\020" +
    "\uffa4\021\uffa4\026\uffa4\033\uffa4\037\uffa4\041\uffa4\055\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\063\uffa4\066\uffa4\001\002\000" +
    "\036\012\uff9d\014\uff9d\020\uff9d\021\uff9d\026\uff9d\033\uff9d" +
    "\037\uff9d\041\uff9d\055\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\066\uff9d\001\002\000\036\012\uffa3\014\uffa3\020\uffa3" +
    "\021\uffa3\026\uffa3\033\uffa3\037\uffa3\041\uffa3\055\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\001\002\000\036" +
    "\012\uff9f\014\uff9f\020\uff9f\021\uff9f\026\uff9f\033\uff9f\037" +
    "\uff9f\041\uff9f\055\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\066\uff9f\001\002\000\036\012\uffa7\014\uffa7\020\uffa7\021" +
    "\uffa7\026\uffa7\033\uffa7\037\uffa7\041\uffa7\055\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\066\uffa7\001\002\000\036\012" +
    "\062\014\051\020\053\021\045\026\050\033\037\037\044" +
    "\041\036\055\043\060\057\061\010\062\042\063\065\066" +
    "\055\001\002\000\036\012\uff9e\014\uff9e\020\uff9e\021\uff9e" +
    "\026\uff9e\033\uff9e\037\uff9e\041\uff9e\055\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\066\uff9e\001\002\000\036\012\uffa1" +
    "\014\uffa1\020\uffa1\021\uffa1\026\uffa1\033\uffa1\037\uffa1\041" +
    "\uffa1\055\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\066\uffa1" +
    "\001\002\000\036\012\uffa5\014\uffa5\020\uffa5\021\uffa5\026" +
    "\uffa5\033\uffa5\037\uffa5\041\uffa5\055\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\066\uffa5\001\002\000\036\012\uff9b\014" +
    "\uff9b\020\uff9b\021\uff9b\026\uff9b\033\uff9b\037\uff9b\041\uff9b" +
    "\055\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\066\uff9b\001" +
    "\002\000\142\002\uffc6\004\070\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\107\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\102\032\071\033\073\034" +
    "\072\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\044\104\045\075\046\074\047\105\050\101\053\077\054" +
    "\100\055\uffc6\056\106\057\076\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\001\002\000\036\012" +
    "\062\014\051\020\053\021\045\026\050\033\037\037\044" +
    "\041\036\055\043\060\057\061\010\062\042\063\065\066" +
    "\055\001\002\000\146\002\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\001\002\000\004\061\117\001\002\000\004\061\115" +
    "\001\002\000\010\037\030\041\036\066\031\001\002\000" +
    "\146\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001\002\000" +
    "\150\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001" +
    "\002\000\042\004\070\022\107\031\102\032\071\033\073" +
    "\034\072\044\104\045\075\046\074\047\105\050\101\053" +
    "\077\054\100\056\106\057\076\064\121\001\002\000\150" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\001\002" +
    "\000\042\004\070\022\107\031\102\032\071\033\073\034" +
    "\072\044\104\045\075\046\074\047\105\050\101\053\077" +
    "\054\100\056\106\057\076\065\123\001\002\000\004\043" +
    "\124\001\002\000\036\012\062\014\051\020\053\021\045" +
    "\026\050\033\037\037\044\041\036\055\043\060\057\061" +
    "\010\062\042\063\065\066\055\001\002\000\046\004\070" +
    "\022\107\031\102\032\071\033\073\034\072\035\uffae\036" +
    "\uffae\042\uffae\044\104\045\075\046\074\047\105\050\101" +
    "\053\077\054\100\056\106\057\076\001\002\000\010\040" +
    "\133\055\131\061\132\001\002\000\142\002\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\001\002\000\006\036\146\040\uffb6\001\002\000\004" +
    "\040\uffb5\001\002\000\052\002\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6" +
    "\023\uffd6\024\uffd6\027\uffd6\030\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\043\uffd6\061\uffd6\001\002\000\032\005\ufffb" +
    "\006\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\023" +
    "\ufffb\024\ufffb\030\ufffb\037\ufffb\061\ufffb\001\002\000\004" +
    "\040\135\001\002\000\032\005\ufffb\006\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb\024\ufffb\030\ufffb" +
    "\037\ufffb\061\ufffb\001\002\000\012\007\ufffa\010\ufffa\011" +
    "\ufffa\027\ufffa\001\002\000\004\011\140\001\002\000\142" +
    "\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\001\002\000\004\011\142\001\002" +
    "\000\142\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\001\002\000\054\002\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\023\uffd8\024\uffd8\027\uffd8" +
    "\030\uffd8\035\uffd8\036\144\037\uffd8\040\uffd8\043\uffd8\061" +
    "\uffd8\001\002\000\004\061\145\001\002\000\054\002\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\024\uffd7\027\uffd7" +
    "\030\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\061" +
    "\uffd7\001\002\000\004\055\147\001\002\000\004\040\uffb7" +
    "\001\002\000\042\004\070\022\107\031\102\032\071\033" +
    "\073\034\072\040\151\044\104\045\075\046\074\047\105" +
    "\050\101\053\077\054\100\056\106\057\076\001\002\000" +
    "\146\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\030\040\uffc8\041\036\042\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\154\052\155\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\001\002\000" +
    "\036\012\062\014\051\020\053\021\045\026\050\033\037" +
    "\037\044\041\036\055\043\060\057\061\010\062\042\063" +
    "\065\066\055\001\002\000\146\002\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\001\002\000\004\061\160\001\002\000\004" +
    "\061\156\001\002\000\010\037\030\041\036\066\031\001" +
    "\002\000\146\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001" +
    "\002\000\150\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\001\002\000\042\004\070\022\107\031\102\032\071" +
    "\033\073\034\072\044\104\045\075\046\074\047\105\050" +
    "\101\053\077\054\100\056\106\057\076\064\162\001\002" +
    "\000\150\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\001\002\000\036\012\062\014\051\020\053\021\045\026" +
    "\050\033\037\037\044\041\036\055\043\060\057\061\010" +
    "\062\042\063\065\066\055\001\002\000\046\004\070\022" +
    "\107\031\102\032\071\033\073\034\072\035\uffad\036\uffad" +
    "\042\uffad\044\104\045\075\046\074\047\105\050\101\053" +
    "\077\054\100\056\106\057\076\001\002\000\010\035\166" +
    "\036\167\042\uffb1\001\002\000\042\012\uffaa\014\uffaa\020" +
    "\uffaa\021\uffaa\026\uffaa\033\uffaa\037\uffaa\041\uffaa\042\uffaa" +
    "\055\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\066" +
    "\uffaa\001\002\000\042\012\uffab\014\uffab\020\uffab\021\uffab" +
    "\026\uffab\033\uffab\037\uffab\041\uffab\042\uffab\055\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\066\uffab\001\002" +
    "\000\042\012\062\014\051\020\053\021\045\026\050\033" +
    "\037\037\044\041\036\042\uffb2\055\043\060\057\061\041" +
    "\062\042\063\065\064\054\066\055\001\002\000\010\035" +
    "\uffb0\036\uffb0\042\uffb0\001\002\000\150\002\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\001\002\000\010\037\030" +
    "\041\036\066\031\001\002\000\146\002\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\001\002\000\004\040\203\001\002\000" +
    "\040\012\062\014\051\020\053\021\045\026\050\033\037" +
    "\036\201\037\044\041\036\055\043\060\057\061\010\062" +
    "\042\063\065\066\055\001\002\000\146\002\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\001\002\000\104\002\uffd5\004\070" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\022\107\023\uffd5\024\uffd5\027\uffd5" +
    "\030\uffd5\031\102\032\071\033\073\034\072\035\uffd5\037" +
    "\uffd5\040\uffd5\044\104\045\075\046\074\047\105\050\101" +
    "\053\077\054\100\056\106\057\076\061\uffd5\001\002\000" +
    "\036\012\062\014\051\020\053\021\045\026\050\033\037" +
    "\037\044\041\036\055\043\060\057\061\010\062\042\063" +
    "\065\066\055\001\002\000\074\004\070\012\uffd4\014\uffd4" +
    "\020\uffd4\021\uffd4\022\107\026\uffd4\031\102\032\071\033" +
    "\uffd4\034\072\036\uffd4\037\uffd4\041\uffd4\044\104\045\075" +
    "\046\074\047\105\050\101\053\077\054\100\055\uffd4\056" +
    "\106\057\076\060\uffd4\061\uffd4\062\uffd4\063\uffd4\066\uffd4" +
    "\001\002\000\146\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\001\002\000\006\037\013\061\010\001\002\000\016\037" +
    "\030\041\036\051\113\052\114\064\111\066\031\001\002" +
    "\000\022\036\uffe1\037\030\041\036\043\uffe1\051\034\052" +
    "\032\064\026\066\031\001\002\000\042\004\070\022\107" +
    "\031\102\032\071\033\073\034\072\044\104\045\075\046" +
    "\074\047\105\050\101\053\077\054\100\056\106\057\076" +
    "\064\210\001\002\000\150\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\001\002\000\004\011\212\001\002\000" +
    "\044\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\017\ufff7\023\ufff7\024\ufff7\027" +
    "\ufff7\030\ufff7\035\ufff7\037\ufff7\061\ufff7\001\002\000\014" +
    "\002\uffff\007\uffff\010\uffff\011\uffff\027\uffff\001\002\000" +
    "\016\002\uffe8\007\uffe8\010\uffe8\011\uffe8\027\uffe8\035\uffe8" +
    "\001\002\000\004\037\126\001\002\000\010\037\uffe3\051" +
    "\uffe3\052\uffe3\001\002\000\010\037\uffe6\051\220\052\221" +
    "\001\002\000\004\061\223\001\002\000\004\061\222\001" +
    "\002\000\004\037\uffe5\001\002\000\010\037\uffe4\051\uffe4" +
    "\052\uffe4\001\002\000\044\002\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef\017\uffef" +
    "\023\uffef\024\uffef\027\uffef\030\uffef\035\uffef\037\uffef\061" +
    "\uffef\001\002\000\042\004\070\022\107\025\226\031\102" +
    "\032\071\033\073\034\072\044\104\045\075\046\074\047" +
    "\105\050\101\053\077\054\100\056\106\057\076\001\002" +
    "\000\036\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb\024\ufffb\030\ufffb" +
    "\037\ufffb\061\ufffb\001\002\000\010\007\uffea\010\uffea\011" +
    "\uffea\001\002\000\010\007\232\010\231\011\233\001\002" +
    "\000\036\012\062\014\051\020\053\021\045\026\050\033" +
    "\037\037\044\041\036\055\043\060\057\061\010\062\042" +
    "\063\065\066\055\001\002\000\032\005\ufffb\006\ufffb\011" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb\024\ufffb" +
    "\030\ufffb\037\ufffb\061\ufffb\001\002\000\044\002\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\017\ufff4\023\ufff4\024\ufff4\027\ufff4\030\ufff4\035" +
    "\ufff4\037\ufff4\061\ufff4\001\002\000\004\011\235\001\002" +
    "\000\044\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\023\ufff3\024\ufff3" +
    "\027\ufff3\030\ufff3\035\ufff3\037\ufff3\061\ufff3\001\002\000" +
    "\042\004\070\022\107\025\237\031\102\032\071\033\073" +
    "\034\072\044\104\045\075\046\074\047\105\050\101\053" +
    "\077\054\100\056\106\057\076\001\002\000\036\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\017\ufffb\023\ufffb\024\ufffb\030\ufffb\037\ufffb\061\ufffb" +
    "\001\002\000\010\007\uffeb\010\uffeb\011\uffeb\001\002\000" +
    "\040\012\uffd3\014\uffd3\020\uffd3\021\uffd3\026\uffd3\033\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\055\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\066\uffd3\001\002\000\044\002\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\023\ufff9\024\ufff9\027\ufff9\030\ufff9\035\ufff9" +
    "\037\ufff9\061\ufff9\001\002\000\046\002\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\015\uffed" +
    "\017\uffed\023\uffed\024\uffed\027\uffed\030\uffed\035\uffed\037" +
    "\uffed\043\247\061\uffed\001\002\000\004\061\245\001\002" +
    "\000\004\037\126\001\002\000\044\002\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\013\uffee\014\uffee\015\uffee" +
    "\017\uffee\023\uffee\024\uffee\027\uffee\030\uffee\035\uffee\037" +
    "\uffee\061\uffee\001\002\000\040\012\uffd3\014\uffd3\020\uffd3" +
    "\021\uffd3\026\uffd3\033\uffd3\036\uffd3\037\uffd3\041\uffd3\055" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\066\uffd3\001\002" +
    "\000\044\002\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\015\uffec\017\uffec\023\uffec\024\uffec" +
    "\027\uffec\030\uffec\035\uffec\037\uffec\061\uffec\001\002\000" +
    "\042\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\017\ufffc\023\ufffc\024\ufffc\027" +
    "\ufffc\030\ufffc\037\ufffc\061\ufffc\001\002\000\042\004\070" +
    "\022\107\031\102\032\071\033\073\034\072\040\253\044" +
    "\104\045\075\046\074\047\105\050\101\053\077\054\100" +
    "\056\106\057\076\001\002\000\016\037\030\041\036\051" +
    "\154\052\155\064\152\066\031\001\002\000\004\016\272" +
    "\001\002\000\010\016\uffd6\036\uffd6\043\256\001\002\000" +
    "\036\012\062\014\051\020\053\021\045\026\050\033\037" +
    "\037\044\041\036\055\043\060\057\061\010\062\042\063" +
    "\065\066\055\001\002\000\042\004\070\022\107\031\102" +
    "\032\071\033\073\034\072\036\260\044\104\045\075\046" +
    "\074\047\105\050\101\053\077\054\100\056\106\057\076" +
    "\001\002\000\036\012\062\014\051\020\053\021\045\026" +
    "\050\033\037\037\044\041\036\055\043\060\057\061\010" +
    "\062\042\063\065\066\055\001\002\000\044\004\070\006" +
    "\262\022\107\031\102\032\071\033\073\034\072\036\263" +
    "\044\104\045\075\046\074\047\105\050\101\053\077\054" +
    "\100\056\106\057\076\001\002\000\032\005\ufffb\006\ufffb" +
    "\011\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\023\ufffb\024" +
    "\ufffb\030\ufffb\037\ufffb\061\ufffb\001\002\000\036\012\062" +
    "\014\051\020\053\021\045\026\050\033\037\037\044\041" +
    "\036\055\043\060\057\061\010\062\042\063\065\066\055" +
    "\001\002\000\042\004\070\006\265\022\107\031\102\032" +
    "\071\033\073\034\072\044\104\045\075\046\074\047\105" +
    "\050\101\053\077\054\100\056\106\057\076\001\002\000" +
    "\032\005\ufffb\006\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\017\ufffb\023\ufffb\024\ufffb\030\ufffb\037\ufffb\061\ufffb\001" +
    "\002\000\004\011\267\001\002\000\044\002\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\023\ufff1\024\ufff1\027\ufff1\030\ufff1\035\ufff1" +
    "\037\ufff1\061\ufff1\001\002\000\004\011\271\001\002\000" +
    "\044\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\017\ufff2\023\ufff2\024\ufff2\027" +
    "\ufff2\030\ufff2\035\ufff2\037\ufff2\061\ufff2\001\002\000\040" +
    "\012\uffd3\014\uffd3\020\uffd3\021\uffd3\026\uffd3\033\uffd3\036" +
    "\uffd3\037\uffd3\041\uffd3\055\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\066\uffd3\001\002\000\004\006\274\001\002\000" +
    "\032\005\ufffb\006\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\017\ufffb\023\ufffb\024\ufffb\030\ufffb\037\ufffb\061\ufffb\001" +
    "\002\000\004\011\276\001\002\000\044\002\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\017\ufff0\023\ufff0\024\ufff0\027\ufff0\030\ufff0\035\ufff0" +
    "\037\ufff0\061\ufff0\001\002\000\042\004\070\006\300\022" +
    "\107\031\102\032\071\033\073\034\072\044\104\045\075" +
    "\046\074\047\105\050\101\053\077\054\100\056\106\057" +
    "\076\001\002\000\032\005\ufffb\006\ufffb\011\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\017\ufffb\023\ufffb\024\ufffb\030\ufffb\037" +
    "\ufffb\061\ufffb\001\002\000\004\011\302\001\002\000\044" +
    "\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\017\ufff6\023\ufff6\024\ufff6\027\ufff6" +
    "\030\ufff6\035\ufff6\037\ufff6\061\ufff6\001\002\000\004\027" +
    "\304\001\002\000\036\012\062\014\051\020\053\021\045" +
    "\026\050\033\037\037\044\041\036\055\043\060\057\061" +
    "\010\062\042\063\065\066\055\001\002\000\102\002\ufff5" +
    "\004\070\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\017\ufff5\022\107\023\ufff5\024\ufff5" +
    "\027\ufff5\030\ufff5\031\102\032\071\033\073\034\072\035" +
    "\ufff5\037\ufff5\044\104\045\075\046\074\047\105\050\101" +
    "\053\077\054\100\056\106\057\076\061\ufff5\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\014\005\013\006\021\007\015\013\011\022\023" +
    "\001\001\000\010\002\302\003\135\004\004\001\001\000" +
    "\016\013\055\014\276\022\063\023\045\024\060\026\057" +
    "\001\001\000\002\001\001\000\004\015\253\001\001\000" +
    "\006\024\034\027\111\001\001\000\016\013\055\014\251" +
    "\022\063\023\045\024\060\026\057\001\001\000\002\001" +
    "\001\000\004\015\242\001\001\000\002\001\001\000\016" +
    "\013\055\014\224\022\063\023\045\024\060\026\057\001" +
    "\001\000\004\017\214\001\001\000\006\011\213\012\175" +
    "\001\001\000\002\001\001\000\010\002\210\003\135\004" +
    "\004\001\001\000\010\010\026\024\034\027\032\001\001" +
    "\000\002\001\001\000\016\013\055\014\206\022\063\023" +
    "\045\024\060\026\057\001\001\000\002\001\001\000\006" +
    "\011\174\012\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\055\014\051\022\063\023\045\024\060\026" +
    "\057\031\062\033\037\001\001\000\002\001\001\000\004" +
    "\032\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\055\014\147\022\063\023\045" +
    "\024\060\026\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\126" +
    "\001\001\000\004\025\102\001\001\000\002\001\001\000" +
    "\016\013\055\014\121\022\063\023\045\024\060\026\057" +
    "\001\001\000\002\001\001\000\006\024\034\027\111\001" +
    "\001\000\002\001\001\000\016\013\055\014\066\022\063" +
    "\023\045\024\060\026\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\034\027\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\055\014" +
    "\107\022\063\023\045\024\060\026\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\102\001\001\000\016\013\055\014\117" +
    "\022\063\023\045\024\060\026\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\034" +
    "\027\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\102\001\001\000\002\001\001\000\004\025\102" +
    "\001\001\000\002\001\001\000\016\013\055\014\124\022" +
    "\063\023\045\024\060\026\057\001\001\000\004\025\102" +
    "\001\001\000\006\015\127\030\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\142" +
    "\001\001\000\010\002\140\003\135\004\004\001\001\000" +
    "\002\001\001\000\010\002\136\003\135\004\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\102\001\001\000\006\024\034\027\152" +
    "\001\001\000\016\013\055\014\160\022\063\023\045\024" +
    "\060\026\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\034\027\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\102\001\001" +
    "\000\002\001\001\000\016\013\055\014\163\022\063\023" +
    "\045\024\060\026\057\001\001\000\004\025\102\001\001" +
    "\000\004\034\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\055\014\051\022\063\023\045\024\060" +
    "\026\057\033\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\034\027\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\055\014\177\022\063\023" +
    "\045\024\060\026\057\001\001\000\002\001\001\000\004" +
    "\025\102\001\001\000\016\013\055\014\201\022\063\023" +
    "\045\024\060\026\057\001\001\000\004\025\102\001\001" +
    "\000\002\001\001\000\006\013\204\022\205\001\001\000" +
    "\006\024\034\027\111\001\001\000\006\024\034\027\032" +
    "\001\001\000\004\025\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\223\001\001\000\004\020\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\102\001\001\000\010\002\226\003\135\004\004" +
    "\001\001\000\004\035\227\001\001\000\002\001\001\000" +
    "\016\013\055\014\235\022\063\023\045\024\060\026\057" +
    "\001\001\000\010\002\233\003\135\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\102\001\001\000\010\002\237\003\135\004\004\001" +
    "\001\000\002\001\001\000\006\011\241\012\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\245\001\001\000\002\001\001\000\006\011\247" +
    "\012\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\102\001\001\000\006\024\034\027\152\001\001" +
    "\000\002\001\001\000\004\016\142\001\001\000\016\013" +
    "\055\014\256\022\063\023\045\024\060\026\057\001\001" +
    "\000\004\025\102\001\001\000\016\013\055\014\260\022" +
    "\063\023\045\024\060\026\057\001\001\000\004\025\102" +
    "\001\001\000\010\002\267\003\135\004\004\001\001\000" +
    "\016\013\055\014\263\022\063\023\045\024\060\026\057" +
    "\001\001\000\004\025\102\001\001\000\010\002\265\003" +
    "\135\004\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\272\012" +
    "\175\001\001\000\002\001\001\000\010\002\274\003\135" +
    "\004\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\102\001\001\000\010\002\300\003\135\004\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\055\014\304\022\063\023\045\024\060" +
    "\026\057\001\001\000\004\025\102\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // chunk ::= chunk2 laststat 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= chunk2 laststat PVIRG 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= chunk2 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chunk2 ::= chunk2 stat 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // chunk2 ::= chunk2 stat PVIRG 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // chunk2 ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunk2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= chunk 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist IGUAL explist 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= functioncall 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= DO block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= WHILE exp DO block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= REPEAT block UNTIL exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= IF exp THEN block ifeio END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= IF exp THEN block ifeio ELSE block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR IDENT IGUAL exp VIRG exp DO block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR IDENT IGUAL exp VIRG exp VIRG exp DO block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR namelist IN explist DO block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FUNCTION funcname funcbody 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL FUNCTION IDENT funcbody 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL namelist 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stat ::= LOCAL namelist IGUAL explist 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ifeio ::= ifeio ELSEIF exp THEN block 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifeio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ifeio ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifeio",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // laststat ::= RETURN 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // laststat ::= RETURN explist 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // laststat ::= BREAK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcname ::= IDENT funcname2 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcname ::= IDENT funcname2 PONTOS IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcname2 ::= funcname2 PONTO IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcname2 ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varlist ::= var varlist2 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varlist2 ::= varlist2 VIRG var 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varlist2 ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var ::= IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= var COLCHEE exp COLCHEE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= var PONTO IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= functioncall COLCHEE exp COLCHEE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= functioncall PONTO IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= PARENE exp PAREND COLCHEE exp COLCHEE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= PARENE exp PAREND PONTO IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // namelist ::= IDENT namelist2 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // namelist2 ::= namelist2 VIRG IDENT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist2",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // namelist2 ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist2",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // explist ::= explist2 exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // explist2 ::= explist2 VIRG exp 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // explist2 ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= NIL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= FALSE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= TRUE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= REAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= INT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= STRING 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= TPONTOS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= function 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= var 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= functioncall 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= PARENE exp PAREND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= tableconstructor 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp binop exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= unop exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // functioncall ::= var args 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // functioncall ::= var PONTOS IDENT args 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // functioncall ::= functioncall args 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // functioncall ::= functioncall PONTOS IDENT args 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // functioncall ::= PARENE exp PAREND args 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // functioncall ::= PARENE exp PAREND PONTOS IDENT args 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= PARENE explist PAREND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= PARENE PAREND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= tableconstructor 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // args ::= STRING 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function ::= FUNCTION funcbody 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcbody ::= PARENE parlist PAREND block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcbody ::= PARENE PAREND block END 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parlist ::= namelist VIRG TPONTOS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parlist ::= namelist 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parlist ::= TPONTOS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tableconstructor ::= CHAVEE fieldlist CHAVED 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tableconstructor ::= CHAVEE CHAVED 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fieldlist ::= field fieldlist2 fieldsep 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fieldlist ::= field fieldlist2 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fieldlist2 ::= fieldlist2 fieldsep field 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fieldlist2 ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // field ::= COLCHEE exp COLCHED IGUAL exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // field ::= IDENT IGUAL exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // field ::= exp 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // fieldsep ::= VIRG 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fieldsep ::= PVIRG 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= MAIS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= MENOS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop ::= VEZES 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= EXPO 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= RESTO 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= DPONTOS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= MENOR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binop ::= MENORI 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binop ::= MAIOR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binop ::= MAIORI 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binop ::= IGUALI 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binop ::= TILI 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // binop ::= AND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // binop ::= OR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unop ::= MENOS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unop ::= NOT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unop ::= TRALHA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
